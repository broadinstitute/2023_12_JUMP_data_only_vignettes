[
  {
    "objectID": "2021_04_26_MOA_PRISM/analysis/4.generate-umap-plots.html",
    "href": "2021_04_26_MOA_PRISM/analysis/4.generate-umap-plots.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nfrom umap import UMAP\nimport utils\nimport numpy as np\nimport plotly.express as px\n\n\nbatch = \"2021_08_30_Batch13\"\n\nexperiment_metadata = (\n    pd.read_csv('output/experiment-metadata.tsv', sep='\\t')\n    .query('Batch==@batch')\n    .query('Plate_Map_Name==\"prism_platemap\"')\n)\nexperiment_metadata.head()\n\n\n\n\n\n\n\n\n\nBatch\nPlate_Map_Name\nAssay_Plate_Barcode\n\n\n\n\n2\n2021_08_30_Batch13\nprism_platemap\nBR00127153\n\n\n3\n2021_08_30_Batch13\nprism_platemap\nBR00127154\n\n\n4\n2021_08_30_Batch13\nprism_platemap\nBR00127152\n\n\n5\n2021_08_30_Batch13\nprism_platemap\nBR00127150\n\n\n6\n2021_08_30_Batch13\nprism_platemap\nBR00127151\n\n\n\n\n\n\n\n\n\n# Read all the profiles\n\nall_plates_df = pd.DataFrame()\n\nfor plate in experiment_metadata.Assay_Plate_Barcode.unique():\n    df = (\n        utils.load_data(batch, plate, 'normalized_feature_select_negcon_batch.csv.gz')\n        .assign(Metadata_Row=lambda x: x.Metadata_Well.str[0:1])\n        .assign(Metadata_Col=lambda x: x.Metadata_Well.str[1:])\n    )\n    all_plates_df = utils.concat_profiles(all_plates_df, df)\n\nmetadata = utils.get_metadata(all_plates_df)\n\nall_plates_df = all_plates_df.replace(np.inf, np.nan).dropna(axis=1,how=\"any\")\n\n\n# Dimensionality reduction using UMAP\n\nX = utils.get_featuredata(all_plates_df)\n\numap_2d = UMAP(n_components=2, init='random', random_state=9000)\nX_embedded = umap_2d.fit_transform(X)\n\numap_features = pd.DataFrame({'umap 1': X_embedded[:,:1].flatten(), 'umap 2': X_embedded[:,1:2].flatten()})\n\nembedded_df = (\n    pd.concat([metadata, umap_features], axis=1)\n    .assign(Metadata_size=lambda x: np.log10(x.Metadata_mmoles_per_liter+1))\n)\nembedded_df.Metadata_size.replace(np.nan, 1, inplace=True)\nembedded_df.head()\n\n\n\n\n\n\n\n\n\nMetadata_plate_map_name\nMetadata_broad_sample\nMetadata_mg_per_ml\nMetadata_mmoles_per_liter\nMetadata_solvent\nMetadata_Plate\nMetadata_Well\nMetadata_Site_Count\nMetadata_Count_Cells\nMetadata_Count_CellsIncludingEdges\n...\nMetadata_Count_Nuclei\nMetadata_Count_NucleiIncludingEdges\nMetadata_Object_Count\nMetadata_pert_type\nMetadata_control_type\nMetadata_Row\nMetadata_Col\numap 1\numap 2\nMetadata_size\n\n\n\n\n0\nprism_platemap\nBRD-K21728777-001-02-3\n2.50700\n4.9784\nDMSO\nBR00127153\nA01\n9\n474\n560\n...\n474\n560\n474\ncontrol\nposcon\nA\n01\n-1.877099\n10.974099\n0.776585\n\n\n1\nprism_platemap\nNaN\nNaN\nNaN\nDMSO\nBR00127153\nA02\n9\n1990\n2206\n...\n1990\n2206\n1990\ncontrol\nnegcon\nA\n02\n8.772266\n7.472638\n1.000000\n\n\n2\nprism_platemap\nBRD-K00005265-001-03-9\n3.75470\n10.0000\nDMSO\nBR00127153\nA03\n9\n609\n679\n...\n609\n679\n609\ntrt\nNaN\nA\n03\n-1.773384\n10.490162\n1.041393\n\n\n3\nprism_platemap\nBRD-K00005265-001-03-9\n0.41719\n1.1111\nDMSO\nBR00127153\nA04\n9\n1575\n1739\n...\n1575\n1739\n1575\ntrt\nNaN\nA\n04\n8.147064\n6.315239\n0.324509\n\n\n4\nprism_platemap\nBRD-K89714990-001-03-1\n3.85840\n10.0000\nDMSO\nBR00127153\nA05\n9\n852\n966\n...\n852\n966\n852\ntrt\nNaN\nA\n05\n0.464660\n7.850191\n1.041393\n\n\n\n\n5 rows Ã— 21 columns\n\n\n\n\n\nfig = px.scatter(\n    data_frame=embedded_df,\n    x='umap 1',\n    y='umap 2',\n    facet_col='Metadata_Plate',\n    facet_col_wrap=5,\n    hover_data=['Metadata_broad_sample','Metadata_Well','Metadata_Object_Count','Metadata_mmoles_per_liter'],\n)\n\nfig.show(\"png\")\nfig.update_layout(title='All plates')\nfig.write_image('figures/4.all_plates.png', width='1280', height='960', scale=2)\nfig.write_html('figures/4.all_plates_facet.html')\n\nfig = px.scatter(\n    data_frame=embedded_df,\n    x='umap 1',\n    y='umap 2',\n    color='Metadata_Plate',\n    hover_data=['Metadata_broad_sample','Metadata_Well','Metadata_Object_Count','Metadata_mmoles_per_liter'],\n)\n\nfig.show(\"png\")\nfig.update_layout(title='All plates')\nfig.write_image('figures/4.all_plates.png', width='1280', height='960', scale=2)\nfig.write_html('figures/4.all_plates.html')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nembedded_df.Metadata_control_type.replace(np.nan, 'trt', inplace=True)\nembedded_df.Metadata_broad_sample.replace(np.nan, 'DMSO', inplace=True)\n\nfig = px.scatter(\n    data_frame=embedded_df,\n    x='umap 1',\n    y='umap 2',\n    color='Metadata_control_type',\n    facet_col='Metadata_Plate',\n    facet_col_wrap=5,\n    hover_data=['Metadata_broad_sample','Metadata_Well','Metadata_Object_Count','Metadata_mmoles_per_liter']\n)\n\nfig.show(\"png\")\nfig.update_layout(title=f'Grouped by perturbation type')\nfig.write_image(f'figures/4.all_plates_perturbation_type.png', width='1280', height='960', scale=2)\nfig.write_html(f'figures/4.all_plates_perturbation_type.html')\n\nfig = px.scatter(\n    data_frame=embedded_df,\n    x='umap 1',\n    y='umap 2',\n    color='Metadata_broad_sample',\n    facet_col='Metadata_Plate',\n    facet_col_wrap=5,\n    hover_data=['Metadata_Well', 'Metadata_Object_Count', 'Metadata_mmoles_per_liter'],\n    size='Metadata_size'\n)\n\nfig.show(\"png\")\nfig.update_layout(title=f'Grouped by perturbation')\nfig.write_image(f'figures/4.all_plates_perturbations.png', width='1280', height='960', scale=2)\nfig.write_html(f'figures/4.all_plates_perturbation.html')"
  },
  {
    "objectID": "2021_04_26_MOA_PRISM/analysis/0.create-experiment-metadata.html",
    "href": "2021_04_26_MOA_PRISM/analysis/0.create-experiment-metadata.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport os\nimport glob\n\nCreate experiment metadata table using barcode_platemap.csv\n\ncol_order = ['Batch', 'Plate_Map_Name','Assay_Plate_Barcode']\n\npath = os.path.join('../metadata/platemaps/*/barcode_platemap.csv')\nfiles = glob.glob(path)\n\ndf = pd.concat(\n    [\n        (\n            pd.read_csv(_)\n            .assign(Batch=_.split('/')[3])\n        )\n        for _ in files\n    ],\n    ignore_index=True\n)\n\ndf[col_order].to_csv('output/experiment-metadata.tsv', index=False, sep='\\t')"
  },
  {
    "objectID": "2021_04_26_MOA_PRISM/analysis/2.calculate-percent-replicating.html",
    "href": "2021_04_26_MOA_PRISM/analysis/2.calculate-percent-replicating.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport utils\nimport matplotlib.pyplot as plt\nimport random\nimport plotly.express as px\nfrom pycytominer.cyto_utils import write_gct\n\nrandom.seed(9000)\n\nplt.style.use(\"seaborn-ticks\")\nplt.rcParams[\"image.cmap\"] = \"Set1\"\nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=plt.cm.Set1.colors)\n%matplotlib inline\n\nIn this notebook we calculate Percent Replicating to measure of the proportion of perturbations with detectable signature. The following are the steps taken\n\nNormalized, feature selected profiles are read and the replicate plates are merged into a single dataframe.\nSeparate data frames are created for each concentration and all the following steps are repeated for each data frame\n\nNegative control, Positive control and empty wells are removed from the dataframe.\nThe signal distribution, which is the median pairwise replicate correlation, is computed for each replicate.\nThe null distribution, which is the median pairwise correlation of non-replicates, is computed for 1000 combinations of non-replicates.\nPercent Replicating is computed as the percentage of the signal distribution that is the greater than the 95th percentile of null distribution.\nThe signal and noise distributions and the Percent Replicating values are plotted and the table of Percent Replicating is printed.\n\nA single table with replicate correlations at both concentration is printed.\nCorrelation values are plotted as bar plots\n\n\nbatch = '2021_08_30_Batch13'\nplatemap = 'prism_platemap'\n\nexperiment_df = (\n    pd.read_csv('output/experiment-metadata.tsv', sep='\\t')\n    .query('Batch==@batch')\n    .query('Plate_Map_Name==@platemap')\n    .reset_index(drop=True)\n)\n\ncorr_replicating_df = pd.DataFrame()\nall_replicating_corr_df = pd.DataFrame()\nall_consensus_df = pd.DataFrame()\ngroup_by_feature = 'Metadata_broad_sample'\nn_samples = 1000\nn_replicates = 5\n\nexperiment_df.head()\n\n\n\n\n\n\n\n\n\nBatch\nPlate_Map_Name\nAssay_Plate_Barcode\n\n\n\n\n0\n2021_08_30_Batch13\nprism_platemap\nBR00127153\n\n\n1\n2021_08_30_Batch13\nprism_platemap\nBR00127154\n\n\n2\n2021_08_30_Batch13\nprism_platemap\nBR00127152\n\n\n3\n2021_08_30_Batch13\nprism_platemap\nBR00127150\n\n\n4\n2021_08_30_Batch13\nprism_platemap\nBR00127151\n\n\n\n\n\n\n\n\n\nall_plates_df = pd.DataFrame()\n\nfor plate in experiment_df.Assay_Plate_Barcode.unique():\n    df = (\n        utils.load_data(batch, plate, \"normalized_feature_select_negcon_batch.csv.gz\")\n        .astype({'Metadata_mmoles_per_liter':str})\n    )\n\n    all_plates_df = utils.concat_profiles(all_plates_df, df)\n\nall_plates_df = utils.remove_all_control_empty_wells(all_plates_df)\nall_plates_df.Metadata_mmoles_per_liter.replace('nan', 'unknown', inplace=True)\nall_plates_df.Metadata_mmoles_per_liter.replace('1.1111', '01.1111', inplace=True)\nall_plates_df.Metadata_mmoles_per_liter.replace('3.3333', '03.3333', inplace=True)\n\n\nall_plates_df = (\n    all_plates_df.assign(Metadata_sample=lambda x: x.Metadata_broad_sample+'_'+x.Metadata_mmoles_per_liter)\n)\n\nreplicating_corr_df = utils.corr_between_replicates_df(all_plates_df, 'Metadata_sample')\nreplicating_corr = list(replicating_corr_df.replicate_correlation)\nnull_replicating = utils.corr_between_non_replicates(all_plates_df, n_samples=n_samples, n_replicates=n_replicates, metadata_compound_name='Metadata_sample')\n\nprop_95_replicating, value_95_replicating = utils.percent_score(null_replicating, replicating_corr, how='right')\n\ncorr_replicating_df = corr_replicating_df.append({'Description':f'Prism compounds',\n                                                  'Replicating':replicating_corr,\n                                                  'Null_Replicating':null_replicating,\n                                                  'Percent_Replicating':'%.1f'%prop_95_replicating,\n                                                  'Value_95':value_95_replicating}, ignore_index=True)\n\nconsensus_df = utils.consensus(all_plates_df, 'Metadata_sample')\n\nreplicating_corr_df[['Metadata_broad_sample','Concentration']] = replicating_corr_df.Metadata_sample.str.split('_',expand=True)\n\nconsensus_df = consensus_df.merge(replicating_corr_df[['replicate_correlation', 'Metadata_sample']], on='Metadata_sample', how='left')\n\n\nprint(corr_replicating_df[['Description', 'Percent_Replicating']].to_markdown(index=False))\n\n| Description     |   Percent_Replicating |\n|:----------------|----------------------:|\n| Prism compounds |                  50.6 |\n\n\n\nutils.distribution_plot(df=corr_replicating_df, output_file=\"2.percent_replicating.png\", metric=\"Percent Replicating\")\n\n\n\n\n\n\n\n\n\nprint(replicating_corr_df.to_markdown(index=False))\n\n| Metadata_sample                |   replicate_correlation | Metadata_broad_sample   | Concentration   |\n|:-------------------------------|------------------------:|:------------------------|:----------------|\n| BRD-K00003792-001-02-9_0.00457 |               0.118482  | BRD-K00003792-001-02-9  | 0.00457         |\n| BRD-K00003792-001-02-9_0.0137  |               0.0921154 | BRD-K00003792-001-02-9  | 0.0137          |\n| BRD-K00003792-001-02-9_0.0412  |               0.388513  | BRD-K00003792-001-02-9  | 0.0412          |\n| BRD-K00003792-001-02-9_0.12346 |               0.812404  | BRD-K00003792-001-02-9  | 0.12346         |\n| BRD-K00003792-001-02-9_0.37037 |               0.11905   | BRD-K00003792-001-02-9  | 0.37037         |\n| BRD-K00003792-001-02-9_01.1111 |               0.933464  | BRD-K00003792-001-02-9  | 01.1111         |\n| BRD-K00003792-001-02-9_03.3333 |               0.759361  | BRD-K00003792-001-02-9  | 03.3333         |\n| BRD-K00003792-001-02-9_10.0    |               0.281915  | BRD-K00003792-001-02-9  | 10.0            |\n| BRD-K00005265-001-03-9_0.00457 |               0.459391  | BRD-K00005265-001-03-9  | 0.00457         |\n| BRD-K00005265-001-03-9_0.0137  |               0.296845  | BRD-K00005265-001-03-9  | 0.0137          |\n| BRD-K00005265-001-03-9_0.0412  |               0.538983  | BRD-K00005265-001-03-9  | 0.0412          |\n| BRD-K00005265-001-03-9_0.12346 |               0.160272  | BRD-K00005265-001-03-9  | 0.12346         |\n| BRD-K00005265-001-03-9_0.37037 |               0.246179  | BRD-K00005265-001-03-9  | 0.37037         |\n| BRD-K00005265-001-03-9_01.1111 |               0.509564  | BRD-K00005265-001-03-9  | 01.1111         |\n| BRD-K00005265-001-03-9_03.3333 |               0.968609  | BRD-K00005265-001-03-9  | 03.3333         |\n| BRD-K00005265-001-03-9_10.0    |               0.826813  | BRD-K00005265-001-03-9  | 10.0            |\n| BRD-K00027789-001-01-9_0.00457 |               0.705035  | BRD-K00027789-001-01-9  | 0.00457         |\n| BRD-K00027789-001-01-9_0.0137  |               0.510103  | BRD-K00027789-001-01-9  | 0.0137          |\n| BRD-K00027789-001-01-9_0.0412  |               0.433312  | BRD-K00027789-001-01-9  | 0.0412          |\n| BRD-K00027789-001-01-9_0.12346 |               0.459157  | BRD-K00027789-001-01-9  | 0.12346         |\n| BRD-K00027789-001-01-9_0.37037 |               0.619805  | BRD-K00027789-001-01-9  | 0.37037         |\n| BRD-K00027789-001-01-9_01.1111 |               0.472937  | BRD-K00027789-001-01-9  | 01.1111         |\n| BRD-K00027789-001-01-9_03.3333 |               0.831606  | BRD-K00027789-001-01-9  | 03.3333         |\n| BRD-K00027789-001-01-9_10.0    |               0.984865  | BRD-K00027789-001-01-9  | 10.0            |\n| BRD-K01826342-238-01-9_0.00457 |               0.615014  | BRD-K01826342-238-01-9  | 0.00457         |\n| BRD-K01826342-238-01-9_0.0137  |               0.264155  | BRD-K01826342-238-01-9  | 0.0137          |\n| BRD-K01826342-238-01-9_0.0412  |               0.332474  | BRD-K01826342-238-01-9  | 0.0412          |\n| BRD-K01826342-238-01-9_0.12346 |               0.299565  | BRD-K01826342-238-01-9  | 0.12346         |\n| BRD-K01826342-238-01-9_0.37037 |               0.471777  | BRD-K01826342-238-01-9  | 0.37037         |\n| BRD-K01826342-238-01-9_01.1111 |               0.986457  | BRD-K01826342-238-01-9  | 01.1111         |\n| BRD-K01826342-238-01-9_03.3333 |               0.979041  | BRD-K01826342-238-01-9  | 03.3333         |\n| BRD-K01826342-238-01-9_10.0    |               0.927246  | BRD-K01826342-238-01-9  | 10.0            |\n| BRD-K05804044-001-18-5_0.00457 |               0.318965  | BRD-K05804044-001-18-5  | 0.00457         |\n| BRD-K05804044-001-18-5_0.0137  |               0.158619  | BRD-K05804044-001-18-5  | 0.0137          |\n| BRD-K05804044-001-18-5_0.0412  |               0.615697  | BRD-K05804044-001-18-5  | 0.0412          |\n| BRD-K05804044-001-18-5_0.12346 |               0.345845  | BRD-K05804044-001-18-5  | 0.12346         |\n| BRD-K05804044-001-18-5_0.37037 |               0.657277  | BRD-K05804044-001-18-5  | 0.37037         |\n| BRD-K05804044-001-18-5_01.1111 |               0.541057  | BRD-K05804044-001-18-5  | 01.1111         |\n| BRD-K05804044-001-18-5_03.3333 |               0.505443  | BRD-K05804044-001-18-5  | 03.3333         |\n| BRD-K05804044-001-18-5_10.0    |               0.995087  | BRD-K05804044-001-18-5  | 10.0            |\n| BRD-K08547377-001-05-1_0.00457 |               0.595905  | BRD-K08547377-001-05-1  | 0.00457         |\n| BRD-K08547377-001-05-1_0.0137  |               0.970955  | BRD-K08547377-001-05-1  | 0.0137          |\n| BRD-K08547377-001-05-1_0.0412  |               0.206035  | BRD-K08547377-001-05-1  | 0.0412          |\n| BRD-K08547377-001-05-1_0.12346 |               0.0658696 | BRD-K08547377-001-05-1  | 0.12346         |\n| BRD-K08547377-001-05-1_0.37037 |               0.596406  | BRD-K08547377-001-05-1  | 0.37037         |\n| BRD-K08547377-001-05-1_01.1111 |               0.777571  | BRD-K08547377-001-05-1  | 01.1111         |\n| BRD-K08547377-001-05-1_03.3333 |               0.94863   | BRD-K08547377-001-05-1  | 03.3333         |\n| BRD-K08547377-001-05-1_10.0    |               0.980465  | BRD-K08547377-001-05-1  | 10.0            |\n| BRD-K23478508-001-27-9_0.00457 |               0.210298  | BRD-K23478508-001-27-9  | 0.00457         |\n| BRD-K23478508-001-27-9_0.0137  |               0.324493  | BRD-K23478508-001-27-9  | 0.0137          |\n| BRD-K23478508-001-27-9_0.0412  |               0.573045  | BRD-K23478508-001-27-9  | 0.0412          |\n| BRD-K23478508-001-27-9_0.12346 |               0.458045  | BRD-K23478508-001-27-9  | 0.12346         |\n| BRD-K23478508-001-27-9_0.37037 |               0.988855  | BRD-K23478508-001-27-9  | 0.37037         |\n| BRD-K23478508-001-27-9_01.1111 |               0.993202  | BRD-K23478508-001-27-9  | 01.1111         |\n| BRD-K23478508-001-27-9_03.3333 |               0.984527  | BRD-K23478508-001-27-9  | 03.3333         |\n| BRD-K23478508-001-27-9_10.0    |               0.998511  | BRD-K23478508-001-27-9  | 10.0            |\n| BRD-K28360340-001-02-6_0.00457 |               0.372321  | BRD-K28360340-001-02-6  | 0.00457         |\n| BRD-K28360340-001-02-6_0.0137  |               0.342989  | BRD-K28360340-001-02-6  | 0.0137          |\n| BRD-K28360340-001-02-6_0.0412  |               0.50173   | BRD-K28360340-001-02-6  | 0.0412          |\n| BRD-K28360340-001-02-6_0.12346 |               0.15518   | BRD-K28360340-001-02-6  | 0.12346         |\n| BRD-K28360340-001-02-6_0.37037 |               0.341945  | BRD-K28360340-001-02-6  | 0.37037         |\n| BRD-K28360340-001-02-6_01.1111 |               0.391515  | BRD-K28360340-001-02-6  | 01.1111         |\n| BRD-K28360340-001-02-6_03.3333 |               0.966228  | BRD-K28360340-001-02-6  | 03.3333         |\n| BRD-K28360340-001-02-6_10.0    |               0.993823  | BRD-K28360340-001-02-6  | 10.0            |\n| BRD-K32744045-001-38-9_0.00457 |               0.524194  | BRD-K32744045-001-38-9  | 0.00457         |\n| BRD-K32744045-001-38-9_0.0137  |               0.255785  | BRD-K32744045-001-38-9  | 0.0137          |\n| BRD-K32744045-001-38-9_0.0412  |               0.49122   | BRD-K32744045-001-38-9  | 0.0412          |\n| BRD-K32744045-001-38-9_0.12346 |               0.130475  | BRD-K32744045-001-38-9  | 0.12346         |\n| BRD-K32744045-001-38-9_0.37037 |               0.573613  | BRD-K32744045-001-38-9  | 0.37037         |\n| BRD-K32744045-001-38-9_01.1111 |               0.919251  | BRD-K32744045-001-38-9  | 01.1111         |\n| BRD-K32744045-001-38-9_03.3333 |               0.935455  | BRD-K32744045-001-38-9  | 03.3333         |\n| BRD-K32744045-001-38-9_10.0    |               0.982146  | BRD-K32744045-001-38-9  | 10.0            |\n| BRD-K36852164-001-03-9_0.00457 |               0.233863  | BRD-K36852164-001-03-9  | 0.00457         |\n| BRD-K36852164-001-03-9_0.0137  |               0.476953  | BRD-K36852164-001-03-9  | 0.0137          |\n| BRD-K36852164-001-03-9_0.0412  |               0.23895   | BRD-K36852164-001-03-9  | 0.0412          |\n| BRD-K36852164-001-03-9_0.12346 |               0.304163  | BRD-K36852164-001-03-9  | 0.12346         |\n| BRD-K36852164-001-03-9_0.37037 |               0.237283  | BRD-K36852164-001-03-9  | 0.37037         |\n| BRD-K36852164-001-03-9_01.1111 |               0.83013   | BRD-K36852164-001-03-9  | 01.1111         |\n| BRD-K36852164-001-03-9_03.3333 |               0.948571  | BRD-K36852164-001-03-9  | 03.3333         |\n| BRD-K36852164-001-03-9_10.0    |               0.775745  | BRD-K36852164-001-03-9  | 10.0            |\n| BRD-K37670250-001-04-9_0.00457 |               0.253164  | BRD-K37670250-001-04-9  | 0.00457         |\n| BRD-K37670250-001-04-9_0.0137  |               0.192666  | BRD-K37670250-001-04-9  | 0.0137          |\n| BRD-K37670250-001-04-9_0.0412  |               0.229431  | BRD-K37670250-001-04-9  | 0.0412          |\n| BRD-K37670250-001-04-9_0.12346 |               0.274157  | BRD-K37670250-001-04-9  | 0.12346         |\n| BRD-K37670250-001-04-9_0.37037 |               0.332436  | BRD-K37670250-001-04-9  | 0.37037         |\n| BRD-K37670250-001-04-9_01.1111 |               0.330985  | BRD-K37670250-001-04-9  | 01.1111         |\n| BRD-K37670250-001-04-9_03.3333 |               0.31886   | BRD-K37670250-001-04-9  | 03.3333         |\n| BRD-K37670250-001-04-9_10.0    |               0.984142  | BRD-K37670250-001-04-9  | 10.0            |\n| BRD-K38408496-001-05-9_0.00457 |               0.497517  | BRD-K38408496-001-05-9  | 0.00457         |\n| BRD-K38408496-001-05-9_0.0137  |               0.295179  | BRD-K38408496-001-05-9  | 0.0137          |\n| BRD-K38408496-001-05-9_0.0412  |               0.46646   | BRD-K38408496-001-05-9  | 0.0412          |\n| BRD-K38408496-001-05-9_0.12346 |               0.45282   | BRD-K38408496-001-05-9  | 0.12346         |\n| BRD-K38408496-001-05-9_0.37037 |               0.32379   | BRD-K38408496-001-05-9  | 0.37037         |\n| BRD-K38408496-001-05-9_01.1111 |               0.524572  | BRD-K38408496-001-05-9  | 01.1111         |\n| BRD-K38408496-001-05-9_03.3333 |               0.161419  | BRD-K38408496-001-05-9  | 03.3333         |\n| BRD-K38408496-001-05-9_10.0    |               0.142047  | BRD-K38408496-001-05-9  | 10.0            |\n| BRD-K65179645-001-10-9_0.00457 |               0.440976  | BRD-K65179645-001-10-9  | 0.00457         |\n| BRD-K65179645-001-10-9_0.0137  |               0.330248  | BRD-K65179645-001-10-9  | 0.0137          |\n| BRD-K65179645-001-10-9_0.0412  |               0.562624  | BRD-K65179645-001-10-9  | 0.0412          |\n| BRD-K65179645-001-10-9_0.12346 |               0.452878  | BRD-K65179645-001-10-9  | 0.12346         |\n| BRD-K65179645-001-10-9_0.37037 |               0.470437  | BRD-K65179645-001-10-9  | 0.37037         |\n| BRD-K65179645-001-10-9_01.1111 |               0.423795  | BRD-K65179645-001-10-9  | 01.1111         |\n| BRD-K65179645-001-10-9_03.3333 |               0.700296  | BRD-K65179645-001-10-9  | 03.3333         |\n| BRD-K65179645-001-10-9_10.0    |               0.936765  | BRD-K65179645-001-10-9  | 10.0            |\n| BRD-K67712442-001-06-9_0.00457 |               0.344139  | BRD-K67712442-001-06-9  | 0.00457         |\n| BRD-K67712442-001-06-9_0.0137  |               0.459964  | BRD-K67712442-001-06-9  | 0.0137          |\n| BRD-K67712442-001-06-9_0.0412  |               0.296658  | BRD-K67712442-001-06-9  | 0.0412          |\n| BRD-K67712442-001-06-9_0.12346 |               0.52938   | BRD-K67712442-001-06-9  | 0.12346         |\n| BRD-K67712442-001-06-9_0.37037 |               0.448913  | BRD-K67712442-001-06-9  | 0.37037         |\n| BRD-K67712442-001-06-9_01.1111 |               0.232126  | BRD-K67712442-001-06-9  | 01.1111         |\n| BRD-K67712442-001-06-9_03.3333 |               0.903597  | BRD-K67712442-001-06-9  | 03.3333         |\n| BRD-K67712442-001-06-9_10.0    |               0.979636  | BRD-K67712442-001-06-9  | 10.0            |\n| BRD-K68395654-001-02-3_0.00457 |               0.541103  | BRD-K68395654-001-02-3  | 0.00457         |\n| BRD-K68395654-001-02-3_0.0137  |               0.934564  | BRD-K68395654-001-02-3  | 0.0137          |\n| BRD-K68395654-001-02-3_0.0412  |               0.789444  | BRD-K68395654-001-02-3  | 0.0412          |\n| BRD-K68395654-001-02-3_0.12346 |               0.984461  | BRD-K68395654-001-02-3  | 0.12346         |\n| BRD-K68395654-001-02-3_0.37037 |               0.993143  | BRD-K68395654-001-02-3  | 0.37037         |\n| BRD-K68395654-001-02-3_01.1111 |               0.964797  | BRD-K68395654-001-02-3  | 01.1111         |\n| BRD-K68395654-001-02-3_03.3333 |               0.988697  | BRD-K68395654-001-02-3  | 03.3333         |\n| BRD-K68395654-001-02-3_10.0    |               0.953728  | BRD-K68395654-001-02-3  | 10.0            |\n| BRD-K73472992-001-02-4_0.00457 |               0.359388  | BRD-K73472992-001-02-4  | 0.00457         |\n| BRD-K73472992-001-02-4_0.0137  |               0.591755  | BRD-K73472992-001-02-4  | 0.0137          |\n| BRD-K73472992-001-02-4_0.0412  |               0.606162  | BRD-K73472992-001-02-4  | 0.0412          |\n| BRD-K73472992-001-02-4_0.12346 |               0.371101  | BRD-K73472992-001-02-4  | 0.12346         |\n| BRD-K73472992-001-02-4_0.37037 |               0.937373  | BRD-K73472992-001-02-4  | 0.37037         |\n| BRD-K73472992-001-02-4_01.1111 |               0.477889  | BRD-K73472992-001-02-4  | 01.1111         |\n| BRD-K73472992-001-02-4_03.3333 |               0.992967  | BRD-K73472992-001-02-4  | 03.3333         |\n| BRD-K73472992-001-02-4_10.0    |               0.97069   | BRD-K73472992-001-02-4  | 10.0            |\n| BRD-K86954340-001-04-9_0.00457 |               0.464992  | BRD-K86954340-001-04-9  | 0.00457         |\n| BRD-K86954340-001-04-9_0.0137  |               0.52169   | BRD-K86954340-001-04-9  | 0.0137          |\n| BRD-K86954340-001-04-9_0.0412  |               0.277897  | BRD-K86954340-001-04-9  | 0.0412          |\n| BRD-K86954340-001-04-9_0.12346 |               0.488585  | BRD-K86954340-001-04-9  | 0.12346         |\n| BRD-K86954340-001-04-9_0.37037 |               0.524954  | BRD-K86954340-001-04-9  | 0.37037         |\n| BRD-K86954340-001-04-9_01.1111 |               0.56134   | BRD-K86954340-001-04-9  | 01.1111         |\n| BRD-K86954340-001-04-9_03.3333 |               0.503167  | BRD-K86954340-001-04-9  | 03.3333         |\n| BRD-K86954340-001-04-9_10.0    |               0.966679  | BRD-K86954340-001-04-9  | 10.0            |\n| BRD-K88510285-001-36-8_0.00457 |               0.604832  | BRD-K88510285-001-36-8  | 0.00457         |\n| BRD-K88510285-001-36-8_0.0137  |               0.98866   | BRD-K88510285-001-36-8  | 0.0137          |\n| BRD-K88510285-001-36-8_0.0412  |               0.998688  | BRD-K88510285-001-36-8  | 0.0412          |\n| BRD-K88510285-001-36-8_0.12346 |               0.957549  | BRD-K88510285-001-36-8  | 0.12346         |\n| BRD-K88510285-001-36-8_0.37037 |               0.919606  | BRD-K88510285-001-36-8  | 0.37037         |\n| BRD-K88510285-001-36-8_01.1111 |               0.985981  | BRD-K88510285-001-36-8  | 01.1111         |\n| BRD-K88510285-001-36-8_03.3333 |               0.994738  | BRD-K88510285-001-36-8  | 03.3333         |\n| BRD-K88510285-001-36-8_10.0    |               0.996082  | BRD-K88510285-001-36-8  | 10.0            |\n| BRD-K89714990-001-03-1_0.00457 |               0.528125  | BRD-K89714990-001-03-1  | 0.00457         |\n| BRD-K89714990-001-03-1_0.0137  |               0.407483  | BRD-K89714990-001-03-1  | 0.0137          |\n| BRD-K89714990-001-03-1_0.0412  |               0.399681  | BRD-K89714990-001-03-1  | 0.0412          |\n| BRD-K89714990-001-03-1_0.12346 |               0.227134  | BRD-K89714990-001-03-1  | 0.12346         |\n| BRD-K89714990-001-03-1_0.37037 |               0.233565  | BRD-K89714990-001-03-1  | 0.37037         |\n| BRD-K89714990-001-03-1_01.1111 |               0.157896  | BRD-K89714990-001-03-1  | 01.1111         |\n| BRD-K89714990-001-03-1_03.3333 |               0.233515  | BRD-K89714990-001-03-1  | 03.3333         |\n| BRD-K89714990-001-03-1_10.0    |               0.982406  | BRD-K89714990-001-03-1  | 10.0            |\n| BRD-K92723993-001-17-4_0.00457 |               0.257511  | BRD-K92723993-001-17-4  | 0.00457         |\n| BRD-K92723993-001-17-4_0.0137  |               0.964418  | BRD-K92723993-001-17-4  | 0.0137          |\n| BRD-K92723993-001-17-4_0.0412  |               0.425512  | BRD-K92723993-001-17-4  | 0.0412          |\n| BRD-K92723993-001-17-4_0.12346 |               0.256893  | BRD-K92723993-001-17-4  | 0.12346         |\n| BRD-K92723993-001-17-4_0.37037 |               0.575476  | BRD-K92723993-001-17-4  | 0.37037         |\n| BRD-K92723993-001-17-4_01.1111 |               0.345232  | BRD-K92723993-001-17-4  | 01.1111         |\n| BRD-K92723993-001-17-4_03.3333 |               0.612436  | BRD-K92723993-001-17-4  | 03.3333         |\n| BRD-K92723993-001-17-4_10.0    |               0.720226  | BRD-K92723993-001-17-4  | 10.0            |\n| BRD-K96259238-001-03-9_0.00457 |               0.784491  | BRD-K96259238-001-03-9  | 0.00457         |\n| BRD-K96259238-001-03-9_0.0137  |               0.163774  | BRD-K96259238-001-03-9  | 0.0137          |\n| BRD-K96259238-001-03-9_0.0412  |               0.193933  | BRD-K96259238-001-03-9  | 0.0412          |\n| BRD-K96259238-001-03-9_0.12346 |               0.372419  | BRD-K96259238-001-03-9  | 0.12346         |\n| BRD-K96259238-001-03-9_0.37037 |               0.402278  | BRD-K96259238-001-03-9  | 0.37037         |\n| BRD-K96259238-001-03-9_01.1111 |               0.840072  | BRD-K96259238-001-03-9  | 01.1111         |\n| BRD-K96259238-001-03-9_03.3333 |               0.167765  | BRD-K96259238-001-03-9  | 03.3333         |\n| BRD-K96259238-001-03-9_10.0    |               0.557423  | BRD-K96259238-001-03-9  | 10.0            |\n| BRD-U00086569-001-01-9_unknown |               0.610929  | BRD-U00086569-001-01-9  | unknown         |\n| BRD-U00086571-001-01-9_unknown |               0.0972278 | BRD-U00086571-001-01-9  | unknown         |\n| BRD-U00086572-001-01-9_unknown |               0.237218  | BRD-U00086572-001-01-9  | unknown         |\n| BRD-U00086573-001-01-9_unknown |               0.220635  | BRD-U00086573-001-01-9  | unknown         |\n| BRD-U00086574-001-01-9_unknown |               0.345524  | BRD-U00086574-001-01-9  | unknown         |\n| BRD-U00086576-001-01-9_unknown |               0.304108  | BRD-U00086576-001-01-9  | unknown         |\n| BRD-U00086578-001-01-9_unknown |               0.287041  | BRD-U00086578-001-01-9  | unknown         |\n| BRD-U00086579-001-01-9_unknown |               0.261437  | BRD-U00086579-001-01-9  | unknown         |\n| BRD-U00086580-001-01-9_unknown |               0.182258  | BRD-U00086580-001-01-9  | unknown         |\n| BRD-U00091550-001-01-9_unknown |               0.296867  | BRD-U00091550-001-01-9  | unknown         |\n\n\n\nprint(corr_replicating_df[['Description', 'Value_95']].to_markdown(index=False))\n\n| Description     |   Value_95 |\n|:----------------|-----------:|\n| Prism compounds |   0.483649 |\n\n\n\nprint(replicating_corr_df[['Metadata_broad_sample','Concentration','replicate_correlation']].to_markdown(index=False))\n\n| Metadata_broad_sample   | Concentration   |   replicate_correlation |\n|:------------------------|:----------------|------------------------:|\n| BRD-K00003792-001-02-9  | 0.00457         |               0.118482  |\n| BRD-K00003792-001-02-9  | 0.0137          |               0.0921154 |\n| BRD-K00003792-001-02-9  | 0.0412          |               0.388513  |\n| BRD-K00003792-001-02-9  | 0.12346         |               0.812404  |\n| BRD-K00003792-001-02-9  | 0.37037         |               0.11905   |\n| BRD-K00003792-001-02-9  | 01.1111         |               0.933464  |\n| BRD-K00003792-001-02-9  | 03.3333         |               0.759361  |\n| BRD-K00003792-001-02-9  | 10.0            |               0.281915  |\n| BRD-K00005265-001-03-9  | 0.00457         |               0.459391  |\n| BRD-K00005265-001-03-9  | 0.0137          |               0.296845  |\n| BRD-K00005265-001-03-9  | 0.0412          |               0.538983  |\n| BRD-K00005265-001-03-9  | 0.12346         |               0.160272  |\n| BRD-K00005265-001-03-9  | 0.37037         |               0.246179  |\n| BRD-K00005265-001-03-9  | 01.1111         |               0.509564  |\n| BRD-K00005265-001-03-9  | 03.3333         |               0.968609  |\n| BRD-K00005265-001-03-9  | 10.0            |               0.826813  |\n| BRD-K00027789-001-01-9  | 0.00457         |               0.705035  |\n| BRD-K00027789-001-01-9  | 0.0137          |               0.510103  |\n| BRD-K00027789-001-01-9  | 0.0412          |               0.433312  |\n| BRD-K00027789-001-01-9  | 0.12346         |               0.459157  |\n| BRD-K00027789-001-01-9  | 0.37037         |               0.619805  |\n| BRD-K00027789-001-01-9  | 01.1111         |               0.472937  |\n| BRD-K00027789-001-01-9  | 03.3333         |               0.831606  |\n| BRD-K00027789-001-01-9  | 10.0            |               0.984865  |\n| BRD-K01826342-238-01-9  | 0.00457         |               0.615014  |\n| BRD-K01826342-238-01-9  | 0.0137          |               0.264155  |\n| BRD-K01826342-238-01-9  | 0.0412          |               0.332474  |\n| BRD-K01826342-238-01-9  | 0.12346         |               0.299565  |\n| BRD-K01826342-238-01-9  | 0.37037         |               0.471777  |\n| BRD-K01826342-238-01-9  | 01.1111         |               0.986457  |\n| BRD-K01826342-238-01-9  | 03.3333         |               0.979041  |\n| BRD-K01826342-238-01-9  | 10.0            |               0.927246  |\n| BRD-K05804044-001-18-5  | 0.00457         |               0.318965  |\n| BRD-K05804044-001-18-5  | 0.0137          |               0.158619  |\n| BRD-K05804044-001-18-5  | 0.0412          |               0.615697  |\n| BRD-K05804044-001-18-5  | 0.12346         |               0.345845  |\n| BRD-K05804044-001-18-5  | 0.37037         |               0.657277  |\n| BRD-K05804044-001-18-5  | 01.1111         |               0.541057  |\n| BRD-K05804044-001-18-5  | 03.3333         |               0.505443  |\n| BRD-K05804044-001-18-5  | 10.0            |               0.995087  |\n| BRD-K08547377-001-05-1  | 0.00457         |               0.595905  |\n| BRD-K08547377-001-05-1  | 0.0137          |               0.970955  |\n| BRD-K08547377-001-05-1  | 0.0412          |               0.206035  |\n| BRD-K08547377-001-05-1  | 0.12346         |               0.0658696 |\n| BRD-K08547377-001-05-1  | 0.37037         |               0.596406  |\n| BRD-K08547377-001-05-1  | 01.1111         |               0.777571  |\n| BRD-K08547377-001-05-1  | 03.3333         |               0.94863   |\n| BRD-K08547377-001-05-1  | 10.0            |               0.980465  |\n| BRD-K23478508-001-27-9  | 0.00457         |               0.210298  |\n| BRD-K23478508-001-27-9  | 0.0137          |               0.324493  |\n| BRD-K23478508-001-27-9  | 0.0412          |               0.573045  |\n| BRD-K23478508-001-27-9  | 0.12346         |               0.458045  |\n| BRD-K23478508-001-27-9  | 0.37037         |               0.988855  |\n| BRD-K23478508-001-27-9  | 01.1111         |               0.993202  |\n| BRD-K23478508-001-27-9  | 03.3333         |               0.984527  |\n| BRD-K23478508-001-27-9  | 10.0            |               0.998511  |\n| BRD-K28360340-001-02-6  | 0.00457         |               0.372321  |\n| BRD-K28360340-001-02-6  | 0.0137          |               0.342989  |\n| BRD-K28360340-001-02-6  | 0.0412          |               0.50173   |\n| BRD-K28360340-001-02-6  | 0.12346         |               0.15518   |\n| BRD-K28360340-001-02-6  | 0.37037         |               0.341945  |\n| BRD-K28360340-001-02-6  | 01.1111         |               0.391515  |\n| BRD-K28360340-001-02-6  | 03.3333         |               0.966228  |\n| BRD-K28360340-001-02-6  | 10.0            |               0.993823  |\n| BRD-K32744045-001-38-9  | 0.00457         |               0.524194  |\n| BRD-K32744045-001-38-9  | 0.0137          |               0.255785  |\n| BRD-K32744045-001-38-9  | 0.0412          |               0.49122   |\n| BRD-K32744045-001-38-9  | 0.12346         |               0.130475  |\n| BRD-K32744045-001-38-9  | 0.37037         |               0.573613  |\n| BRD-K32744045-001-38-9  | 01.1111         |               0.919251  |\n| BRD-K32744045-001-38-9  | 03.3333         |               0.935455  |\n| BRD-K32744045-001-38-9  | 10.0            |               0.982146  |\n| BRD-K36852164-001-03-9  | 0.00457         |               0.233863  |\n| BRD-K36852164-001-03-9  | 0.0137          |               0.476953  |\n| BRD-K36852164-001-03-9  | 0.0412          |               0.23895   |\n| BRD-K36852164-001-03-9  | 0.12346         |               0.304163  |\n| BRD-K36852164-001-03-9  | 0.37037         |               0.237283  |\n| BRD-K36852164-001-03-9  | 01.1111         |               0.83013   |\n| BRD-K36852164-001-03-9  | 03.3333         |               0.948571  |\n| BRD-K36852164-001-03-9  | 10.0            |               0.775745  |\n| BRD-K37670250-001-04-9  | 0.00457         |               0.253164  |\n| BRD-K37670250-001-04-9  | 0.0137          |               0.192666  |\n| BRD-K37670250-001-04-9  | 0.0412          |               0.229431  |\n| BRD-K37670250-001-04-9  | 0.12346         |               0.274157  |\n| BRD-K37670250-001-04-9  | 0.37037         |               0.332436  |\n| BRD-K37670250-001-04-9  | 01.1111         |               0.330985  |\n| BRD-K37670250-001-04-9  | 03.3333         |               0.31886   |\n| BRD-K37670250-001-04-9  | 10.0            |               0.984142  |\n| BRD-K38408496-001-05-9  | 0.00457         |               0.497517  |\n| BRD-K38408496-001-05-9  | 0.0137          |               0.295179  |\n| BRD-K38408496-001-05-9  | 0.0412          |               0.46646   |\n| BRD-K38408496-001-05-9  | 0.12346         |               0.45282   |\n| BRD-K38408496-001-05-9  | 0.37037         |               0.32379   |\n| BRD-K38408496-001-05-9  | 01.1111         |               0.524572  |\n| BRD-K38408496-001-05-9  | 03.3333         |               0.161419  |\n| BRD-K38408496-001-05-9  | 10.0            |               0.142047  |\n| BRD-K65179645-001-10-9  | 0.00457         |               0.440976  |\n| BRD-K65179645-001-10-9  | 0.0137          |               0.330248  |\n| BRD-K65179645-001-10-9  | 0.0412          |               0.562624  |\n| BRD-K65179645-001-10-9  | 0.12346         |               0.452878  |\n| BRD-K65179645-001-10-9  | 0.37037         |               0.470437  |\n| BRD-K65179645-001-10-9  | 01.1111         |               0.423795  |\n| BRD-K65179645-001-10-9  | 03.3333         |               0.700296  |\n| BRD-K65179645-001-10-9  | 10.0            |               0.936765  |\n| BRD-K67712442-001-06-9  | 0.00457         |               0.344139  |\n| BRD-K67712442-001-06-9  | 0.0137          |               0.459964  |\n| BRD-K67712442-001-06-9  | 0.0412          |               0.296658  |\n| BRD-K67712442-001-06-9  | 0.12346         |               0.52938   |\n| BRD-K67712442-001-06-9  | 0.37037         |               0.448913  |\n| BRD-K67712442-001-06-9  | 01.1111         |               0.232126  |\n| BRD-K67712442-001-06-9  | 03.3333         |               0.903597  |\n| BRD-K67712442-001-06-9  | 10.0            |               0.979636  |\n| BRD-K68395654-001-02-3  | 0.00457         |               0.541103  |\n| BRD-K68395654-001-02-3  | 0.0137          |               0.934564  |\n| BRD-K68395654-001-02-3  | 0.0412          |               0.789444  |\n| BRD-K68395654-001-02-3  | 0.12346         |               0.984461  |\n| BRD-K68395654-001-02-3  | 0.37037         |               0.993143  |\n| BRD-K68395654-001-02-3  | 01.1111         |               0.964797  |\n| BRD-K68395654-001-02-3  | 03.3333         |               0.988697  |\n| BRD-K68395654-001-02-3  | 10.0            |               0.953728  |\n| BRD-K73472992-001-02-4  | 0.00457         |               0.359388  |\n| BRD-K73472992-001-02-4  | 0.0137          |               0.591755  |\n| BRD-K73472992-001-02-4  | 0.0412          |               0.606162  |\n| BRD-K73472992-001-02-4  | 0.12346         |               0.371101  |\n| BRD-K73472992-001-02-4  | 0.37037         |               0.937373  |\n| BRD-K73472992-001-02-4  | 01.1111         |               0.477889  |\n| BRD-K73472992-001-02-4  | 03.3333         |               0.992967  |\n| BRD-K73472992-001-02-4  | 10.0            |               0.97069   |\n| BRD-K86954340-001-04-9  | 0.00457         |               0.464992  |\n| BRD-K86954340-001-04-9  | 0.0137          |               0.52169   |\n| BRD-K86954340-001-04-9  | 0.0412          |               0.277897  |\n| BRD-K86954340-001-04-9  | 0.12346         |               0.488585  |\n| BRD-K86954340-001-04-9  | 0.37037         |               0.524954  |\n| BRD-K86954340-001-04-9  | 01.1111         |               0.56134   |\n| BRD-K86954340-001-04-9  | 03.3333         |               0.503167  |\n| BRD-K86954340-001-04-9  | 10.0            |               0.966679  |\n| BRD-K88510285-001-36-8  | 0.00457         |               0.604832  |\n| BRD-K88510285-001-36-8  | 0.0137          |               0.98866   |\n| BRD-K88510285-001-36-8  | 0.0412          |               0.998688  |\n| BRD-K88510285-001-36-8  | 0.12346         |               0.957549  |\n| BRD-K88510285-001-36-8  | 0.37037         |               0.919606  |\n| BRD-K88510285-001-36-8  | 01.1111         |               0.985981  |\n| BRD-K88510285-001-36-8  | 03.3333         |               0.994738  |\n| BRD-K88510285-001-36-8  | 10.0            |               0.996082  |\n| BRD-K89714990-001-03-1  | 0.00457         |               0.528125  |\n| BRD-K89714990-001-03-1  | 0.0137          |               0.407483  |\n| BRD-K89714990-001-03-1  | 0.0412          |               0.399681  |\n| BRD-K89714990-001-03-1  | 0.12346         |               0.227134  |\n| BRD-K89714990-001-03-1  | 0.37037         |               0.233565  |\n| BRD-K89714990-001-03-1  | 01.1111         |               0.157896  |\n| BRD-K89714990-001-03-1  | 03.3333         |               0.233515  |\n| BRD-K89714990-001-03-1  | 10.0            |               0.982406  |\n| BRD-K92723993-001-17-4  | 0.00457         |               0.257511  |\n| BRD-K92723993-001-17-4  | 0.0137          |               0.964418  |\n| BRD-K92723993-001-17-4  | 0.0412          |               0.425512  |\n| BRD-K92723993-001-17-4  | 0.12346         |               0.256893  |\n| BRD-K92723993-001-17-4  | 0.37037         |               0.575476  |\n| BRD-K92723993-001-17-4  | 01.1111         |               0.345232  |\n| BRD-K92723993-001-17-4  | 03.3333         |               0.612436  |\n| BRD-K92723993-001-17-4  | 10.0            |               0.720226  |\n| BRD-K96259238-001-03-9  | 0.00457         |               0.784491  |\n| BRD-K96259238-001-03-9  | 0.0137          |               0.163774  |\n| BRD-K96259238-001-03-9  | 0.0412          |               0.193933  |\n| BRD-K96259238-001-03-9  | 0.12346         |               0.372419  |\n| BRD-K96259238-001-03-9  | 0.37037         |               0.402278  |\n| BRD-K96259238-001-03-9  | 01.1111         |               0.840072  |\n| BRD-K96259238-001-03-9  | 03.3333         |               0.167765  |\n| BRD-K96259238-001-03-9  | 10.0            |               0.557423  |\n| BRD-U00086569-001-01-9  | unknown         |               0.610929  |\n| BRD-U00086571-001-01-9  | unknown         |               0.0972278 |\n| BRD-U00086572-001-01-9  | unknown         |               0.237218  |\n| BRD-U00086573-001-01-9  | unknown         |               0.220635  |\n| BRD-U00086574-001-01-9  | unknown         |               0.345524  |\n| BRD-U00086576-001-01-9  | unknown         |               0.304108  |\n| BRD-U00086578-001-01-9  | unknown         |               0.287041  |\n| BRD-U00086579-001-01-9  | unknown         |               0.261437  |\n| BRD-U00086580-001-01-9  | unknown         |               0.182258  |\n| BRD-U00091550-001-01-9  | unknown         |               0.296867  |\n\n\n\nfig = px.bar(data_frame=replicating_corr_df.sort_values(by=['Concentration']),\n             x='Metadata_broad_sample',\n             y='replicate_correlation',\n             color='Concentration',\n             barmode='group')\nfig.update_xaxes(tickangle=45)\nfig.update_layout(bargap=0.3,bargroupgap=0.0,\n                  xaxis1=dict(title='Name'),\n                  xaxis2=dict(title='Name'),\n                  yaxis1=dict(title='Replicate correlation'),\n                  yaxis3=dict(title='Replicate correlation'))\nfig.show(\"png\")\nfig.write_image('figures/2.replicate_correlation_concentration.png', width=1000, height=750, scale=2)\n\n\n\n\n\n\n\n\n\nfig = px.bar(data_frame=replicating_corr_df.sort_values(by=['Concentration']),\n             x='Metadata_broad_sample',\n             y='replicate_correlation',\n             facet_col='Concentration',\n             facet_col_wrap=3)\nfig.update_xaxes(tickangle=45)\nfig.update_layout(bargap=0.3,bargroupgap=0.0,\n                  xaxis1=dict(title='Name'),\n                  xaxis2=dict(title='Name'),\n                  xaxis3=dict(title='Name'),\n                  yaxis1=dict(title='Replicate correlation'),\n                  yaxis4=dict(title='Replicate correlation'),\n                  yaxis7=dict(title='Replicate correlation'))\nfig.show(\"png\")\nfig.write_image('figures/2.replicate_correlation_concentration_separate.png', width=2000, height=1500, scale=2)\n\n\n\n\n\n\n\n\n\nfig = px.bar(data_frame=replicating_corr_df.sort_values(by=['Concentration']),\n             x='Metadata_broad_sample',\n             y='replicate_correlation',\n             color='Concentration')\nfig.update_xaxes(tickangle=45)\nfig.update_layout(bargap=0.3,bargroupgap=0.0,\n                  xaxis1=dict(title='Name'),\n                  xaxis2=dict(title='Name'),\n                  yaxis1=dict(title='Replicate correlation'),\n                  yaxis3=dict(title='Replicate correlation'))\nfig.show(\"png\")\nfig.write_image('figures/2.replicate_correlation_concentration_stacked.png', width=1000, height=750, scale=2)\n\n\n\n\n\n\n\n\n\nconsensus_df.rename(columns={'replicate_correlation': 'Metadata_replicate_correlation'}, inplace=True)\nwrite_gct(consensus_df, 'output/consensus_profiles.gct')"
  },
  {
    "objectID": "2021_03_11_MolecularGlue_AmitChoudharyLab/analysis/4.representations-and-correlations.html",
    "href": "2021_03_11_MolecularGlue_AmitChoudharyLab/analysis/4.representations-and-correlations.html",
    "title": "",
    "section": "",
    "text": "import utils\nimport pandas as pd\nfrom umap import UMAP\nimport plotly.express as px\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.cluster.hierarchy as hierarchy\nimport seaborn as sns\n\nrandom.seed(9000)\n\nplt.style.use(\"seaborn-ticks\")\nplt.rcParams[\"image.cmap\"] = \"Set1\"\nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=plt.cm.Set1.colors)\n\nIn this notebook, the negcon normalized profiles are projected onto UMAP dimensions. Replicates are collapsed to consensus profiles and the UMAP representations are plotted. Correlations are plotted as heatmap and hierarchical clustering is plotted as a dendogram.\n\nexperiment_df = pd.read_csv('output/experiment-metadata.tsv', sep='\\t')\n\n\nall_plates_df = pd.DataFrame()\n\nfor i, plate in enumerate(experiment_df.Assay_Plate_Barcode.unique()):\n    batch = experiment_df.loc[i, 'Batch']\n    df = (\n        pd.read_csv(f'../profiles/{batch}/{plate}/{plate}_normalized_negcon.csv.gz')\n    )\n    all_plates_df = utils.concat_profiles(all_plates_df, df)\n\nall_plates_df = utils.remove_all_control_empty_wells(all_plates_df)\nall_plates_df = all_plates_df.replace(np.inf, np.nan).dropna(axis=1,how=\"any\")\n\nall_plates_conc_1_df = utils.remove_all_control_empty_wells(all_plates_df.query('Metadata_mmoles_per_liter==1'))\nall_plates_conc_4_df = utils.remove_all_control_empty_wells(all_plates_df.query('Metadata_mmoles_per_liter==4'))\n\nall_plates_conc_1_consensus_df = utils.consensus(all_plates_conc_1_df, 'Metadata_broad_sample')\nall_plates_conc_4_consensus_df = utils.consensus(all_plates_conc_4_df, 'Metadata_broad_sample')\n\n\nX_1 = utils.get_featuredata(all_plates_conc_1_consensus_df)\nX_4 = utils.get_featuredata(all_plates_conc_4_consensus_df)\n\numap_2d = UMAP(n_components=2, init='random', random_state=9000)\nX_1_embedded = umap_2d.fit_transform(X_1)\nX_4_embedded = umap_2d.fit_transform(X_4)\n\n\nSupplier_catalog_1 = list(all_plates_conc_1_consensus_df.Metadata_Supplier_Catalog)\nSupplier_catalog_4 = list(all_plates_conc_4_consensus_df.Metadata_Supplier_Catalog)\nrow_1 = list(all_plates_conc_1_df.Metadata_Well.drop_duplicates().str[0:1])\ncol_1 = list(all_plates_conc_1_df.Metadata_Well.drop_duplicates().str[1:])\nrow_4 = list(all_plates_conc_4_df.Metadata_Well.drop_duplicates().str[0:1])\ncol_4 = list(all_plates_conc_4_df.Metadata_Well.drop_duplicates().str[1:])\n\n\nX_1_embedded_df = pd.DataFrame({'Supplier Catalog':Supplier_catalog_1,\n                                'Row':row_1,\n                                'Col':col_1,\n                                'umap 1': X_1_embedded[:,:1].flatten(),\n                                'umap 2': X_1_embedded[:,1:2].flatten()})\n\nX_4_embedded_df = pd.DataFrame({'Supplier Catalog':Supplier_catalog_1,\n                                'Row':row_4,\n                                'Col':col_4,\n                                'umap 1': X_4_embedded[:,:1].flatten(),\n                                'umap 2': X_4_embedded[:,1:2].flatten()})\n\n\nX_1_embedded_df = X_1_embedded_df.sample(frac=1).reset_index(drop=True)\nX_4_embedded_df = X_4_embedded_df.sample(frac=1).reset_index(drop=True)\n\n\nfig = px.scatter(data_frame=X_1_embedded_df,\n                 x='umap 1',\n                 y='umap 2',\n                 opacity=0.8,\n                 hover_name='Supplier Catalog')\nfig.update_traces(marker=dict(size=8))\nfig.update_layout(title=f'Concentration = 1 uM',\n                  xaxis=dict(title='umap 1'),\n                  yaxis=dict(title='umap 2'))\nfig.show(\"png\")\nfig.write_image('figures/4.umap_conc_1.png', height=480, width=640, scale=2)\nfig.write_html('figures/4.umap_conc_1.html')\n\n\n\n\n\n\n\n\n\nfig = px.scatter(data_frame=X_4_embedded_df,\n                 x='umap 1',\n                 y='umap 2',\n                 opacity=0.8,\n                 hover_name='Supplier Catalog')\nfig.update_traces(marker=dict(size=8))\nfig.update_layout(title=f'Concentration = 4 uM',\n                  xaxis=dict(title='umap 1'),\n                  yaxis=dict(title='umap 2'))\nfig.show(\"png\")\nfig.write_image('figures/4.umap_conc_4.png', height=480, width=640, scale=2)\nfig.write_html('figures/4.umap_conc_4.html')\n\n\n\n\n\n\n\n\n\ncorr = np.corrcoef(X_1, X_4)\nsns.set(rc={'figure.figsize': (30,30)})\nsns.heatmap(corr, cmap='Blues', square=True)\nplt.savefig('figures/4.correlation.png')\nplt.close()\n\n\npdist = hierarchy.distance.pdist(corr)\nlinkage = hierarchy.linkage(pdist, method='complete')\nhierarchy.dendrogram(linkage, orientation='right')\nplt.savefig('figures/4.hierarchical_clustering.png')\nplt.close()"
  },
  {
    "objectID": "2021_03_11_MolecularGlue_AmitChoudharyLab/analysis/5.create-gct-with-replicate-correlation.html",
    "href": "2021_03_11_MolecularGlue_AmitChoudharyLab/analysis/5.create-gct-with-replicate-correlation.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport utils\nimport numpy as np\nfrom pycytominer.cyto_utils import write_gct\n\n\nexperiment_df = pd.read_csv('output/experiment-metadata.tsv', sep='\\t')\n\ncorr_replicating_df = pd.DataFrame()\ngroup_by_feature = 'Metadata_broad_sample'\n\n\nall_plates_df = pd.DataFrame()\n\nfor i, plate in enumerate(experiment_df.Assay_Plate_Barcode.unique()):\n    batch = experiment_df.loc[i, 'Batch']\n    df = (\n        pd.read_csv(f'../profiles/{batch}/{plate}/{plate}_normalized_feature_select_negcon_batch.csv.gz')\n    )\n    all_plates_df = utils.concat_profiles(all_plates_df, df)\n\nall_plates_df = utils.remove_all_control_empty_wells(all_plates_df)\n\nall_plates_conc_1_df = utils.remove_all_control_empty_wells(all_plates_df.query('Metadata_mmoles_per_liter==1'))\nall_plates_conc_4_df = utils.remove_all_control_empty_wells(all_plates_df.query('Metadata_mmoles_per_liter==4'))\n\nall_plates_conc_1_consensus_df = utils.consensus(all_plates_conc_1_df, 'Metadata_broad_sample')\nall_plates_conc_4_consensus_df = utils.consensus(all_plates_conc_4_df, 'Metadata_broad_sample')\n\n\nreplicating_corr_conc_1_df = (\n    utils.corr_between_replicates_df(all_plates_conc_1_df, group_by_feature)\n    .rename(columns={'replicate_correlation': 'Metadata_replicate_correlation'})\n)\nreplicating_corr_conc_4_df = (\n    utils.corr_between_replicates_df(all_plates_conc_4_df, group_by_feature)\n    .rename(columns={'replicate_correlation': 'Metadata_replicate_correlation'})\n)\n\nall_plates_conc_1_consensus_df = all_plates_conc_1_consensus_df.merge(replicating_corr_conc_1_df, on='Metadata_broad_sample', how='left')\nall_plates_conc_4_consensus_df = all_plates_conc_4_consensus_df.merge(replicating_corr_conc_4_df, on='Metadata_broad_sample', how='left')\n\ncorr_df = pd.concat([all_plates_conc_1_consensus_df, all_plates_conc_4_consensus_df], ignore_index=True, join='inner')\n\n\n# Write gct files using consensus profiles\nwrite_gct(corr_df, 'output/consensus_profiles.gct')"
  },
  {
    "objectID": "2021_03_11_MolecularGlue_AmitChoudharyLab/analysis/2.calculate-percent-replicating.html",
    "href": "2021_03_11_MolecularGlue_AmitChoudharyLab/analysis/2.calculate-percent-replicating.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport utils\nimport matplotlib.pyplot as plt\nimport random\nimport plotly.express as px\n\nrandom.seed(9000)\n\nplt.style.use(\"seaborn-ticks\")\nplt.rcParams[\"image.cmap\"] = \"Set1\"\nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=plt.cm.Set1.colors)\n%matplotlib inline\n\nIn this notebook we calculate Percent Replicating to measure of the proportion of perturbations with detectable signature. The following are the steps taken\n\nNormalized, feature selected profiles are read and the replicate plates are merged into a single dataframe.\nSeparate data frames are created for each concentration and all the following steps are repeated for each data frame\n\nNegative control, Positive control and empty wells are removed from the dataframe.\nThe signal distribution, which is the median pairwise replicate correlation, is computed for each replicate.\nThe null distribution, which is the median pairwise correlation of non-replicates, is computed for 1000 combinations of non-replicates.\nPercent Replicating is computed as the percentage of the signal distribution that is the greater than the 95th percentile of null distribution.\nThe signal and noise distributions and the Percent Replicating values are plotted and the table of Percent Replicating is printed.\n\nA single table with replicate correlations at both concentration is printed.\nA scatter plot of replicate correlations at the two concentrations is plotted.\n\n\nexperiment_df = pd.read_csv('output/experiment-metadata.tsv', sep='\\t')\n\ncorr_replicating_df = pd.DataFrame()\ngroup_by_feature = 'Metadata_broad_sample'\nn_replicates = experiment_df.shape[0]\nn_samples = 1000\n\n\nall_plates_df = pd.DataFrame()\n\nfor i, plate in enumerate(experiment_df.Assay_Plate_Barcode.unique()):\n    batch = experiment_df.loc[i, 'Batch']\n    df = (\n        pd.read_csv(f'../profiles/{batch}/{plate}/{plate}_normalized_feature_select_negcon_batch.csv.gz')\n    )\n    all_plates_df = utils.concat_profiles(all_plates_df, df)\n\nall_plates_df = utils.remove_all_control_empty_wells(all_plates_df)\n\nall_plates_conc_1_df = utils.remove_all_control_empty_wells(all_plates_df.query('Metadata_mmoles_per_liter==1'))\nall_plates_conc_4_df = utils.remove_all_control_empty_wells(all_plates_df.query('Metadata_mmoles_per_liter==4'))\n\n\nreplicating_corr_conc_1_df = utils.corr_between_replicates_df(all_plates_conc_1_df, group_by_feature)\nreplicating_corr = list(replicating_corr_conc_1_df.replicate_correlation)\nnull_replicating = utils.corr_between_non_replicates(all_plates_conc_1_df, n_samples=n_samples, n_replicates=n_replicates, metadata_compound_name=group_by_feature)\n\nprop_95_replicating, value_95_replicating_conc_1 = utils.percent_score(null_replicating, replicating_corr, how='right')\n\ncorr_replicating_df = corr_replicating_df.append({'Description':\"Concentration = 1 uM\",\n                                                  'Replicating':replicating_corr,\n                                                  'Null_Replicating':null_replicating,\n                                                  'Percent_Replicating':'%.1f'%prop_95_replicating,\n                                                  'Value_95':value_95_replicating_conc_1}, ignore_index=True)\n\n\nreplicating_corr_conc_4_df = utils.corr_between_replicates_df(all_plates_conc_4_df, group_by_feature)\nreplicating_corr = list(replicating_corr_conc_4_df.replicate_correlation)\nnull_replicating = utils.corr_between_non_replicates(all_plates_conc_4_df, n_samples=n_samples, n_replicates=n_replicates, metadata_compound_name=group_by_feature)\n\nprop_95_replicating, value_95_replicating_conc_4 = utils.percent_score(null_replicating, replicating_corr, how='right')\n\ncorr_replicating_df = corr_replicating_df.append({'Description':\"Concentration = 4 uM\",\n                                                  'Replicating':replicating_corr,\n                                                  'Null_Replicating':null_replicating,\n                                                  'Percent_Replicating':'%.1f'%prop_95_replicating,\n                                                  'Value_95':value_95_replicating_conc_4}, ignore_index=True)\n\n\nprint(corr_replicating_df[['Description', 'Percent_Replicating']].to_markdown(index=False))\n\n| Description          |   Percent_Replicating |\n|:---------------------|----------------------:|\n| Concentration = 1 uM |                  84.7 |\n| Concentration = 4 uM |                  83.3 |\n\n\n\nutils.distribution_plot(df=corr_replicating_df, output_file=\"2.percent_replicating.png\", metric=\"Percent Replicating\")\n\n\n\n\n\n\n\n\n\ncorr_df = replicating_corr_conc_1_df.merge(replicating_corr_conc_4_df, on='Metadata_broad_sample', suffixes=('_conc_1','_conc_4'))\ncatalog_df = all_plates_conc_1_df[['Metadata_broad_sample','Metadata_Supplier_Catalog']].copy().drop_duplicates().reset_index(drop=True)\ncorr_df = (\n        catalog_df.merge(corr_df, on='Metadata_broad_sample', how='right')\n        .sort_values(by=['replicate_correlation_conc_1','replicate_correlation_conc_4'], ascending=False)\n        .reset_index(drop=True)\n)\n\nprint(corr_df.to_markdown(index=False))\n\n| Metadata_broad_sample   | Metadata_Supplier_Catalog       |   replicate_correlation_conc_1 |   replicate_correlation_conc_4 |\n|:------------------------|:--------------------------------|-------------------------------:|-------------------------------:|\n| BRD-U00088098-001-01-9  | VS1123                          |                      0.899068  |                      0.539145  |\n| BRD-U00088039-001-01-9  | VS812                           |                      0.884921  |                      0.39496   |\n| BRD-U00087978-001-01-9  | VS11 + ibrutinib-amine          |                      0.853814  |                      0.452694  |\n| BRD-U00087992-001-01-9  | VS632 and nutlin                |                      0.849026  |                      0.556655  |\n| BRD-U00088002-001-01-9  | VS11 and VS812                  |                      0.845501  |                      0.751529  |\n| BRD-U00088025-001-01-9  | puh71 and VS985                 |                      0.826535  |                      0.658658  |\n| BRD-U00088051-001-01-9  | GNF-2 and MK8722                |                      0.825155  |                      0.513955  |\n| BRD-U00088001-001-01-9  | VS11 and VS1088                 |                      0.809246  |                      0.422617  |\n| BRD-U00087996-001-01-9  | VS11 and VHL ligand             |                      0.805559  |                      0.320959  |\n| BRD-U00087984-001-01-9  | VS558                           |                      0.793658  |                      0.846373  |\n| BRD-U00087977-001-01-9  | VS389                           |                      0.79201   |                      0.626476  |\n| BRD-U00088052-001-01-9  | PK880                           |                      0.785091  |                      0.700635  |\n| BRD-U00087972-001-01-9  | VS11                            |                      0.772876  |                      0.650596  |\n| BRD-U00088050-001-01-9  | PK874                           |                      0.747657  |                      0.563025  |\n| BRD-U00088117-001-01-9  | PF-06409577 and (+)-JQ1         |                      0.74282   |                      0.698353  |\n| BRD-U00088109-001-01-9  | MK8722 and ibrutinib-piv        |                      0.730793  |                      0.623001  |\n| BRD-U00088048-001-01-9  | PK828                           |                      0.728375  |                      0.4579    |\n| BRD-U00088060-001-01-9  | PK954                           |                      0.721584  |                      0.500492  |\n| BRD-U00087979-001-01-9  | VS549                           |                      0.706428  |                      0.712205  |\n| BRD-U00088057-001-01-9  | PK958                           |                      0.706344  |                      0.662975  |\n| BRD-U00087986-001-01-9  | VS903                           |                      0.694565  |                      0.699225  |\n| BRD-U00088055-001-01-9  | VS812 and MK8722                |                      0.687626  |                      0.371778  |\n| BRD-U00088104-001-01-9  | SCL370                          |                      0.686698  |                      0.540142  |\n| BRD-U00088047-001-01-9  | VHL ligand and MK8722           |                      0.683854  |                      0.424459  |\n| BRD-U00088014-001-01-9  | VS1088 and (+)-JQ1              |                      0.680056  |                      0.417032  |\n| BRD-U00088094-001-01-9  | AD289                           |                      0.674616  |                      0.497136  |\n| BRD-U00087980-001-01-9  | VS731                           |                      0.668067  |                      0.685561  |\n| BRD-U00088023-001-01-9  | puh71 and VS11                  |                      0.663865  |                      0.67198   |\n| BRD-U00087970-001-01-9  | VS929                           |                      0.662216  |                      0.802212  |\n| BRD-U00087973-001-01-9  | VS11 and (+)-JQ1                |                      0.65643   |                      0.406916  |\n| BRD-U00088024-001-01-9  | puh71 and VS812                 |                      0.651425  |                      0.654108  |\n| BRD-U00087985-001-01-9  | VS11 and dasatinib              |                      0.651409  |                      0.567403  |\n| BRD-U00088059-001-01-9  | PK963                           |                      0.644976  |                      0.428492  |\n| BRD-U00088054-001-01-9  | PK962                           |                      0.641227  |                      0.397555  |\n| BRD-U00088118-001-01-9  | HY-111363                       |                      0.631216  |                      0.391441  |\n| BRD-U00088046-001-01-9  | PK769                           |                      0.622604  |                      0.676488  |\n| BRD-U00088021-001-01-9  | VS1040                          |                      0.578757  |                      0.693841  |\n| BRD-U00087993-001-01-9  | VS667                           |                      0.578495  |                      0.65965   |\n| BRD-U00088022-001-01-9  | VS1038                          |                      0.578231  |                      0.394694  |\n| BRD-U00088116-001-01-9  | 27366                           |                      0.571106  |                      0.565737  |\n| BRD-U00088100-001-01-9  | SCL381                          |                      0.561098  |                      0.790165  |\n| BRD-U00088112-001-01-9  | PF-06409577 and ibrutinib-amine |                      0.559509  |                      0.472586  |\n| BRD-U00088096-001-01-9  | AD331                           |                      0.557852  |                      0.454193  |\n| BRD-U00088108-001-01-9  | SCL344                          |                      0.554221  |                      0.482571  |\n| BRD-U00088049-001-01-9  | (+)-JQ1 and MK8722              |                      0.545965  |                      0.37075   |\n| BRD-U00087974-001-01-9  | VS1085                          |                      0.541541  |                      0.261913  |\n| BRD-U00087987-001-01-9  | VS11 and nutlin                 |                      0.523124  |                      0.565303  |\n| BRD-U00087989-001-01-9  | VS854                           |                      0.520876  |                      0.491319  |\n| BRD-U00088102-001-01-9  | VS985 and MK8722                |                      0.506417  |                      0.705483  |\n| BRD-U00088103-001-01-9  | SCL383                          |                      0.503073  |                      0.622796  |\n| BRD-U00087997-001-01-9  | VS1086                          |                      0.500226  |                      0.708382  |\n| BRD-U00088028-001-01-9  | VS1178                          |                      0.498547  |                      0.595598  |\n| BRD-U00088053-001-01-9  | GNF-2 and MK8722                |                      0.496566  |                      0.48779   |\n| BRD-U00088019-001-01-9  | VS812 and (+)-JQ1               |                      0.490249  |                      0.541589  |\n| BRD-U00088105-001-01-9  | MK8722 and ibrutinib            |                      0.488815  |                      0.626362  |\n| BRD-U00087983-001-01-9  | VS560                           |                      0.475598  |                      0.633232  |\n| BRD-U00088018-001-01-9  | AD213                           |                      0.47107   |                      0.0928022 |\n| BRD-U00088106-001-01-9  | SCL331                          |                      0.460109  |                      0.555185  |\n| BRD-U00087991-001-01-9  | VS632                           |                      0.455204  |                      0.183011  |\n| BRD-U00087981-001-01-9  | VS994                           |                      0.449087  |                      0.573811  |\n| BRD-U00087999-001-01-9  | VS1088                          |                      0.446365  |                      0.414495  |\n| BRD-U00088121-001-01-9  | Imatinib                        |                      0.446144  |                      0.711741  |\n| BRD-U00088016-001-01-9  | AD107                           |                      0.442382  |                      0.334647  |\n| BRD-U00088041-001-01-9  | VS1143                          |                      0.433787  |                      0.32818   |\n| BRD-U00088032-001-01-9  | VS1150                          |                      0.433092  |                      0.506271  |\n| BRD-U00088110-001-01-9  | SCL351                          |                      0.429914  |                      0.351051  |\n| BRD-U00088071-001-01-9  | PT166                           |                      0.426543  |                      0.368531  |\n| BRD-U00088029-001-01-9  | VS1179                          |                      0.426111  |                      0.596351  |\n| BRD-U00088034-001-01-9  | VS1188                          |                      0.425984  |                      0.588037  |\n| BRD-U00088061-001-01-9  | Gefitinib and MK8722            |                      0.416483  |                      0.409753  |\n| BRD-U00088038-001-01-9  | VS1088                          |                      0.415939  |                      0.490977  |\n| BRD-U00087998-001-01-9  | VS1087                          |                      0.415313  |                      0.556749  |\n| BRD-U00088043-001-01-9  | VS1142                          |                      0.415267  |                      0.350284  |\n| BRD-U00088056-001-01-9  | PK957                           |                      0.414946  |                      0.518376  |\n| BRD-U00088115-001-01-9  | SCL209                          |                      0.413223  |                      0.349826  |\n| BRD-U00088045-001-01-9  | VS1156                          |                      0.4129    |                      0.557615  |\n| BRD-U00088086-001-01-9  | AD42                            |                      0.405664  |                      0.252813  |\n| BRD-U00088087-001-01-9  | AD43                            |                      0.398173  |                      0.35351   |\n| BRD-U00088036-001-01-9  | VS1148                          |                      0.397476  |                      0.366358  |\n| BRD-U00088058-001-01-9  | PK947 and MK8722                |                      0.396911  |                      0.254199  |\n| BRD-U00088011-001-01-9  | VS987                           |                      0.395594  |                      0.659059  |\n| BRD-U00088114-001-01-9  | SCL231                          |                      0.389453  |                      0.277073  |\n| BRD-U00088091-001-01-9  | AD49                            |                      0.38823   |                      0.316081  |\n| BRD-U00087982-001-01-9  | VS11 and VS581                  |                      0.387768  |                      0.791841  |\n| BRD-U00088077-001-01-9  | PT534d                          |                      0.385187  |                      0.336925  |\n| BRD-U00088004-001-01-9  | VS1025                          |                      0.383095  |                      0.50456   |\n| BRD-U00088107-001-01-9  | MK8722 and ibrutinib-amine      |                      0.38033   |                      0.615671  |\n| BRD-U00088027-001-01-9  | VS812 and Gefitinib             |                      0.376828  |                      0.555355  |\n| BRD-U00088095-001-01-9  | AD314                           |                      0.376386  |                      0.47287   |\n| BRD-U00088007-001-01-9  | VS632 and VS812                 |                      0.37366   |                      0.530628  |\n| BRD-U00088119-001-01-9  | SCL292                          |                      0.373075  |                      0.403681  |\n| BRD-U00088017-001-01-9  | AD95                            |                      0.369559  |                      0.304516  |\n| BRD-U00088090-001-01-9  | AD47                            |                      0.367958  |                      0.338976  |\n| BRD-U00088120-001-01-9  | AD336                           |                      0.367625  |                      0.338227  |\n| BRD-U00088044-001-01-9  | VS1155                          |                      0.365476  |                      0.320471  |\n| BRD-U00088099-001-01-9  | QB-4271                         |                      0.364179  |                      0.310016  |\n| BRD-U00088063-001-01-9  | VS775                           |                      0.359003  |                      0.082942  |\n| BRD-U00088089-001-01-9  | AD46                            |                      0.357339  |                      0.452596  |\n| BRD-U00088069-001-01-9  | PT174                           |                      0.356746  |                      0.448118  |\n| BRD-U00088026-001-01-9  | AD304                           |                      0.353134  |                      0.0846944 |\n| BRD-U00088085-001-01-9  | PK806                           |                      0.339247  |                      0.17949   |\n| BRD-U00088012-001-01-9  | VS989                           |                      0.338019  |                      0.656564  |\n| BRD-U00088003-001-01-9  | VS1115                          |                      0.336281  |                      0.43606   |\n| BRD-U00088033-001-01-9  | VS1161                          |                      0.335037  |                      0.518527  |\n| BRD-U00088084-001-01-9  | PK804                           |                      0.323392  |                      0.20054   |\n| BRD-U00088064-001-01-9  | VS777                           |                      0.322204  |                      0.324526  |\n| BRD-U00088092-001-01-9  | AD55                            |                      0.319115  |                      0.419865  |\n| BRD-U00087971-001-01-9  | VS995                           |                      0.317681  |                      0.541347  |\n| BRD-U00088068-001-01-9  | PT163                           |                      0.317347  |                      0.383561  |\n| BRD-U00088013-001-01-9  | VS1069                          |                      0.311959  |                      0.28994   |\n| BRD-U00088111-001-01-9  | SCL254                          |                      0.311889  |                      0.169217  |\n| BRD-U00088040-001-01-9  | VS1013                          |                      0.311649  |                      0.257133  |\n| BRD-U00088009-001-01-9  | VS832                           |                      0.311608  |                      0.583719  |\n| BRD-U00088065-001-01-9  | VS786                           |                      0.310098  |                      0.390173  |\n| BRD-U00088101-001-01-9  | SCL377 and MK8722               |                      0.308213  |                      0.520096  |\n| BRD-U00088076-001-01-9  | PT189                           |                      0.306667  |                      0.218925  |\n| BRD-U00088074-001-01-9  | PT178                           |                      0.304983  |                      0.28904   |\n| BRD-U00088020-001-01-9  | VS1037                          |                      0.300228  |                      0.443712  |\n| BRD-U00088010-001-01-9  | VS1092                          |                      0.298762  |                      0.538178  |\n| BRD-U00088000-001-01-9  | VS812                           |                      0.292319  |                      0.525353  |\n| BRD-U00088078-001-01-9  | PT534m                          |                      0.29152   |                      0.371247  |\n| BRD-U00088037-001-01-9  | VS1171                          |                      0.286816  |                      0.526751  |\n| BRD-U00088066-001-01-9  | PT171                           |                      0.286014  |                      0.113542  |\n| BRD-U00088005-001-01-9  | AD178                           |                      0.277093  |                      0.360155  |\n| BRD-U00088079-001-01-9  | PK799                           |                      0.275537  |                      0.38761   |\n| BRD-U00088088-001-01-9  | AD45                            |                      0.275387  |                      0.413437  |\n| BRD-U00087988-001-01-9  | VS827                           |                      0.275317  |                      0.604524  |\n| BRD-U00088093-001-01-9  | AD64                            |                      0.26183   |                      0.138297  |\n| BRD-U00088080-001-01-9  | PK802                           |                      0.260466  |                      0.339996  |\n| BRD-U00088075-001-01-9  | PT179                           |                      0.256369  |                      0.131295  |\n| BRD-U00088015-001-01-9  | AD100                           |                      0.25566   |                      0.327199  |\n| BRD-U00088083-001-01-9  | PK801                           |                      0.250384  |                      0.292607  |\n| BRD-U00087976-001-01-9  | VS535                           |                      0.236745  |                      0.738675  |\n| BRD-U00088042-001-01-9  | VS1144                          |                      0.235272  |                      0.250143  |\n| BRD-U00088082-001-01-9  | PK798                           |                      0.234817  |                      0.403634  |\n| BRD-U00088067-001-01-9  | PT159                           |                      0.228663  |                      0.260211  |\n| BRD-U00088006-001-01-9  | AD183                           |                      0.215618  |                      0.764512  |\n| BRD-U00087990-001-01-9  | VS899                           |                      0.212768  |                      0.119799  |\n| BRD-U00088070-001-01-9  | PT187                           |                      0.206619  |                      0.399009  |\n| BRD-U00088113-001-01-9  | SCL335                          |                      0.194144  |                      0.272368  |\n| BRD-U00088031-001-01-9  | VS1189                          |                      0.18295   |                      0.369077  |\n| BRD-U00088035-001-01-9  | VS1187                          |                      0.167663  |                      0.579452  |\n| BRD-U00087975-001-01-9  | AD352                           |                      0.161728  |                      0.523734  |\n| BRD-U00087994-001-01-9  | AD20                            |                      0.161147  |                      0.181812  |\n| BRD-U00088030-001-01-9  | VS1181                          |                      0.154053  |                      0.353081  |\n| BRD-U00088073-001-01-9  | PT176                           |                      0.144896  |                      0.394648  |\n| BRD-U00088081-001-01-9  | PK803                           |                      0.142273  |                      0.430979  |\n| BRD-U00088008-001-01-9  | VS632 and VS1088                |                      0.0981019 |                      0.547763  |\n| BRD-U00088072-001-01-9  | PT164                           |                      0.0889251 |                      0.440969  |\n| BRD-U00088097-001-01-9  | KRC10                           |                      0.0376473 |                      0.196734  |\n\n\n\nfig = px.scatter(data_frame=corr_df, x='replicate_correlation_conc_1', y='replicate_correlation_conc_4', hover_data=['Metadata_Supplier_Catalog'], trendline='ols')\nfig.update_layout(title='Replicate correlation at different concentrations',\n                  xaxis=dict(title='Replicate correlation (1uM)'),\n                  yaxis=dict(title='Replicate correlation (4uM)'))\nfig.add_vline(x=value_95_replicating_conc_1, line_color='red', line_dash=\"dash\")\nfig.add_hline(y=value_95_replicating_conc_4, line_color='red', line_dash=\"dash\")\n\nfig.show(\"png\")\nfig.write_image('figures/2.replicate_correlation_scatter.png', height=480, width=640, scale=2)"
  },
  {
    "objectID": "pills/notebooks/basic.html",
    "href": "pills/notebooks/basic.html",
    "title": "Basic JUMP data access",
    "section": "",
    "text": "This is a tutorial on how to access We will use polars to fetch the data frame lazily, with the help of s3fs and pyarrow. We prefer lazy loading because the data can be too big to be handled in memory.\n\nimport polars as pl\nfrom pyarrow.dataset import dataset\nfrom s3fs import S3FileSystem\n\nThe shapes of the available datasets are: - crispr: Knock-out genetic perturbations. - orf: Overexpression genetic perturbations. - compounds: Chemical genetic perturbations.\nThe aws paths of the dataframes are shown below:\n\nprefix = (\n    \"s3://cellpainting-gallery/cpg0016-jump-integrated/source_all/workspace/profiles\"\n)\nfilepaths = dict(\n    crispr=f\"{prefix}/chandrasekaran_2024_0000000/crispr/wellpos_cellcount_mad_outlier_nan_featselect_harmony.parquet\",\n    orf=f\"{prefix}/chandrasekaran_2024_0000000/orf/wellpos_cellcount_mad_outlier_nan_featselect_harmony.parquet\",\n    compound=f\"{prefix}/arevalo_2023_e834481/compound/mad_int_featselect_harmony.parquet/\",\n)\n\nWe use a S3FileSystem to avoid the need of credentials.\n\ndef lazy_load(path: str) -&gt; pl.DataFrame:\n    fs = S3FileSystem(anon=True)\n    myds = dataset(path, filesystem=fs)\n    df = pl.scan_pyarrow_dataset(myds)\n    return df\n\nWe will lazy load the data to visualise its columns\n\nprint(\"Width, or number of columns.\")\nfor name, path in filepaths.items():\n    data = lazy_load(path)\n    metadata_cols = [col for col in data.columns if col.startswith(\"Metadata\")]\n    print(f\"{name}: {data.width}, containing {len(metadata_cols)} metadata columns\")\n\nWidth, or number of columns.\ncrispr: 1119, containing 8 metadata columns\norf: 882, containing 20 metadata columns\ncompound: 979, containing 10 metadata columns\n\n\nLet us now focus on the crispr dataset\n\ndata = lazy_load(filepaths[\"crispr\"])"
  },
  {
    "objectID": "2021_04_26_MOA_UMiami/analysis/4.generate-umap-plots.html",
    "href": "2021_04_26_MOA_UMiami/analysis/4.generate-umap-plots.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nfrom umap import UMAP\nimport utils\nimport numpy as np\nimport plotly.express as px\n\n\nbatch = \"2021_08_30_Batch13\"\n\nexperiment_metadata = (\n    pd.read_csv('output/experiment-metadata.tsv', sep='\\t')\n    .query('Batch==@batch')\n    .query('Plate_Map_Name==\"miami_platemap\"')\n)\nexperiment_metadata.head()\n\n\n\n\n\n\n\n\n\nBatch\nPlate_Map_Name\nAssay_Plate_Barcode\n\n\n\n\n2\n2021_08_30_Batch13\nmiami_platemap\nBR00127153\n\n\n3\n2021_08_30_Batch13\nmiami_platemap\nBR00127154\n\n\n4\n2021_08_30_Batch13\nmiami_platemap\nBR00127152\n\n\n5\n2021_08_30_Batch13\nmiami_platemap\nBR00127150\n\n\n6\n2021_08_30_Batch13\nmiami_platemap\nBR00127151\n\n\n\n\n\n\n\n\n\n# Read all the profiles\n\nall_plates_df = pd.DataFrame()\n\nfor plate in experiment_metadata.Assay_Plate_Barcode.unique():\n    df = (\n        utils.load_data(batch, plate, 'normalized_feature_select_negcon_batch.csv.gz')\n        .assign(Metadata_Row=lambda x: x.Metadata_Well.str[0:1])\n        .assign(Metadata_Col=lambda x: x.Metadata_Well.str[1:])\n    )\n    all_plates_df = utils.concat_profiles(all_plates_df, df)\n\nmetadata = utils.get_metadata(all_plates_df)\n\nall_plates_df = all_plates_df.replace(np.inf, np.nan).dropna(axis=1,how=\"any\")\n\n\n# Dimensionality reduction using UMAP\n\nX = utils.get_featuredata(all_plates_df)\n\numap_2d = UMAP(n_components=2, init='random', random_state=9000)\nX_embedded = umap_2d.fit_transform(X)\n\numap_features = pd.DataFrame({'umap 1': X_embedded[:,:1].flatten(), 'umap 2': X_embedded[:,1:2].flatten()})\n\nembedded_df = pd.concat([metadata, umap_features], axis=1)\nembedded_df.head()\n\n\n\n\n\n\n\n\n\nMetadata_plate_map_name\nMetadata_broad_sample\nMetadata_mg_per_ml\nMetadata_mmoles_per_liter\nMetadata_solvent\nMetadata_Plate\nMetadata_Well\nMetadata_Site_Count\nMetadata_Count_Cells\nMetadata_Count_CellsIncludingEdges\n...\nMetadata_Barcode\nMetadata_Supplier\nMetadata_Supplier Catalog\nMetadata_Alternate Name\nMetadata_pert_type\nMetadata_control_type\nMetadata_Row\nMetadata_Col\numap 1\numap 2\n\n\n\n\n0\nmiami_platemap\nBRD-K21728777-001-02-3\n2.50700\n4.9784\nDMSO\nBR00127153\nA01\n9\n474\n560\n...\nNaN\nNaN\nAMG900\nAMG900\ncontrol\nposcon\nA\n01\n-4.149757\n8.085120\n\n\n1\nmiami_platemap\nNaN\nNaN\nNaN\nDMSO\nBR00127153\nA02\n9\n1990\n2206\n...\nNaN\nNaN\nDMSO\nDMSO\ncontrol\nnegcon\nA\n02\n10.552545\n9.901835\n\n\n2\nmiami_platemap\nBRD-K47557313-001-02-7\n2.21200\n5.0099\nDMSO\nBR00127153\nA23\n9\n1752\n1923\n...\nNaN\nNaN\nLY2109761\nLY2109761\ncontrol\nposcon\nA\n23\n2.890364\n9.122291\n\n\n3\nmiami_platemap\nNaN\nNaN\nNaN\nDMSO\nBR00127153\nA24\n9\n1892\n2098\n...\nNaN\nNaN\nDMSO\nDMSO\ncontrol\nnegcon\nA\n24\n12.998260\n7.485055\n\n\n4\nmiami_platemap\nBRD-K21728777-001-02-3\n0.83567\n1.6595\nDMSO\nBR00127153\nB01\n9\n511\n593\n...\nNaN\nNaN\nAMG900\nAMG900\ncontrol\nposcon\nB\n01\n-4.016148\n8.244111\n\n\n\n\n5 rows Ã— 26 columns\n\n\n\n\n\nfig = px.scatter(\n    data_frame=embedded_df,\n    x='umap 1',\n    y='umap 2',\n    color='Metadata_Plate',\n    hover_data=['Metadata_broad_sample', 'Metadata_Supplier Catalog','Metadata_Well', 'Metadata_Object_Count']\n)\n\nfig.show(\"png\")\nfig.update_layout(title='All plates')\nfig.write_image('figures/4.all_plates.png', width='1280', height='960', scale=2)\nfig.write_html('figures/4.all_plates.html')\n\n\n\n\n\n\n\n\n\nembedded_df.Metadata_control_type.replace(np.nan, 'trt', inplace=True)\n\nfig = px.scatter(\n    data_frame=embedded_df,\n    x='umap 1',\n    y='umap 2',\n    color='Metadata_control_type',\n    symbol='Metadata_Plate',\n    hover_data=['Metadata_broad_sample', 'Metadata_Supplier Catalog','Metadata_Well', 'Metadata_Object_Count']\n)\n\nfig.show(\"png\")\nfig.update_layout(title=f'Grouped by perturbation type')\nfig.write_image(f'figures/4.all_plates_perturbation_type.png', width='1280', height='960', scale=2)\nfig.write_html(f'figures/4.all_plates_perturbation_type.html')\n\nfig = px.scatter(\n    data_frame=embedded_df,\n    x='umap 1',\n    y='umap 2',\n    color='Metadata_Supplier Catalog',\n    symbol='Metadata_Plate',\n    hover_data=['Metadata_broad_sample','Metadata_Well', 'Metadata_Object_Count']\n)\n\nfig.show(\"png\")\nfig.update_layout(title=f'Grouped by perturbation type')\nfig.write_image(f'figures/4.all_plates_perturbations.png', width='1280', height='960', scale=2)\nfig.write_html(f'figures/4.all_plates_perturbation.html')"
  },
  {
    "objectID": "2021_04_26_MOA_UMiami/analysis/0.create-experiment-metadata.html",
    "href": "2021_04_26_MOA_UMiami/analysis/0.create-experiment-metadata.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport os\nimport glob\n\nCreate experiment metadata table using barcode_platemap.csv\n\ncol_order = ['Batch', 'Plate_Map_Name','Assay_Plate_Barcode']\n\npath = os.path.join('../metadata/platemaps/*/barcode_platemap.csv')\nfiles = glob.glob(path)\n\ndf = pd.concat(\n    [\n        (\n            pd.read_csv(_)\n            .assign(Batch=_.split('/')[3])\n        )\n        for _ in files\n    ],\n    ignore_index=True\n)\n\ndf[col_order].to_csv('output/experiment-metadata.tsv', index=False, sep='\\t')"
  },
  {
    "objectID": "2021_04_26_MOA_UMiami/analysis/1.visualize-platemap.html",
    "href": "2021_04_26_MOA_UMiami/analysis/1.visualize-platemap.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport utils\nimport matplotlib.pyplot as plt\n\n\nbatch = '2021_08_23_Batch12'\nplatemap = 'miami_platemap'\n\nplatemap_df = pd.read_csv(f'../metadata/platemaps/{batch}/platemap/{platemap}.txt', sep='\\t')\nmetadata_df = pd.read_csv(f'../metadata/external_metadata/miami_metadata.tsv', sep='\\t')\n\nplatemap_metadata_df = platemap_df.merge(metadata_df, on='broad_sample', how='left')\nplatemap_metadata_df.head()\n\n\n\n\n\n\n\n\n\nplate_map_name\nwell_position\nbroad_sample\nmg_per_ml\nmmoles_per_liter\nsolvent\nsmiles\nStereo Comments\nBarcode\nSupplier\nSupplier Catalog\nAlternate Name\npert_type\ncontrol_type\n\n\n\n\n0\nmiami_platemap\nA01\nBRD-K21728777-001-02-3\n2.507000\n4.978375\nDMSO\nCc1csc(c1)-c1nnc(Nc2ccc(Oc3ncccc3-c3ccnc(N)n3)...\nNaN\nNaN\nNaN\nAMG900\nAMG900\ncontrol\nposcon\n\n\n1\nmiami_platemap\nA02\nNaN\nNaN\nNaN\nDMSO\nCS(=O)C\nNaN\nNaN\nNaN\nDMSO\nDMSO\ncontrol\nnegcon\n\n\n2\nmiami_platemap\nA23\nBRD-K47557313-001-02-7\n2.212000\n5.009910\nDMSO\nC(CN1CCOCC1)Oc1ccc2c(ccnc2c1)-c1c(nn2CCCc12)-c...\nNaN\nNaN\nNaN\nLY2109761\nLY2109761\ncontrol\nposcon\n\n\n3\nmiami_platemap\nA24\nNaN\nNaN\nNaN\nDMSO\nCS(=O)C\nNaN\nNaN\nNaN\nDMSO\nDMSO\ncontrol\nnegcon\n\n\n4\nmiami_platemap\nB01\nBRD-K21728777-001-02-3\n0.835667\n1.659458\nDMSO\nCc1csc(c1)-c1nnc(Nc2ccc(Oc3ncccc3-c3ccnc(N)n3)...\nNaN\nNaN\nNaN\nAMG900\nAMG900\ncontrol\nposcon\n\n\n\n\n\n\n\n\n\nutils.draw_plates(platemap_metadata_df)\nplt.savefig('figures/1.platemap.png')"
  },
  {
    "objectID": "2021_04_26_MOA_UMiami/analysis/2.calculate-percent-replicating.html",
    "href": "2021_04_26_MOA_UMiami/analysis/2.calculate-percent-replicating.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport utils\nimport matplotlib.pyplot as plt\nimport random\nimport plotly.express as px\nfrom pycytominer.cyto_utils import write_gct\n\nrandom.seed(9000)\n\nplt.style.use(\"seaborn-ticks\")\nplt.rcParams[\"image.cmap\"] = \"Set1\"\nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=plt.cm.Set1.colors)\n%matplotlib inline\n\nIn this notebook we calculate Percent Replicating to measure of the proportion of perturbations with detectable signature. The following are the steps taken\n\nNormalized, feature selected profiles are read and the replicate plates are merged into a single dataframe.\nSeparate data frames are created for each concentration and all the following steps are repeated for each data frame\n\nNegative control, Positive control and empty wells are removed from the dataframe.\nThe signal distribution, which is the median pairwise replicate correlation, is computed for each replicate.\nThe null distribution, which is the median pairwise correlation of non-replicates, is computed for 1000 combinations of non-replicates.\nPercent Replicating is computed as the percentage of the signal distribution that is the greater than the 95th percentile of null distribution.\nThe signal and noise distributions and the Percent Replicating values are plotted and the table of Percent Replicating is printed.\n\nA single table with replicate correlations at both concentration is printed.\nCorrelation values are plotted as bar plots\n\n\nbatch = '2021_08_30_Batch13'\nplatemap = 'miami_platemap'\n\nexperiment_df = (\n    pd.read_csv('output/experiment-metadata.tsv', sep='\\t')\n    .query('Batch==@batch')\n    .query('Plate_Map_Name==@platemap')\n    .reset_index(drop=True)\n)\n\ncorr_replicating_df = pd.DataFrame()\nall_replicating_corr_df = pd.DataFrame()\nall_consensus_df = pd.DataFrame()\ngroup_by_feature = 'Metadata_broad_sample'\nn_samples = 1000\nn_replicates = 5\n\nexperiment_df.head()\n\n\n\n\n\n\n\n\n\nBatch\nPlate_Map_Name\nAssay_Plate_Barcode\n\n\n\n\n0\n2021_08_30_Batch13\nmiami_platemap\nBR00127153\n\n\n1\n2021_08_30_Batch13\nmiami_platemap\nBR00127154\n\n\n2\n2021_08_30_Batch13\nmiami_platemap\nBR00127152\n\n\n3\n2021_08_30_Batch13\nmiami_platemap\nBR00127150\n\n\n4\n2021_08_30_Batch13\nmiami_platemap\nBR00127151\n\n\n\n\n\n\n\n\n\nall_plates_df = pd.DataFrame()\n\nfor plate in experiment_df.Assay_Plate_Barcode.unique():\n    df = (\n        utils.load_data(batch, plate, \"normalized_feature_select_negcon_batch.csv.gz\")\n        .astype({'Metadata_mmoles_per_liter':str})\n        .rename(columns={'Metadata_Alternate Name': 'Metadata_Name'})\n    )\n\n    all_plates_df = utils.concat_profiles(all_plates_df, df)\n\nall_plates_df = utils.remove_all_control_empty_wells(all_plates_df)\nall_plates_df.Metadata_mmoles_per_liter.replace('nan', 'unknown', inplace=True)\nall_plates_df.Metadata_mmoles_per_liter.replace('1.1111', '01.1111', inplace=True)\nall_plates_df.Metadata_mmoles_per_liter.replace('3.3333', '03.3333', inplace=True)\n\nall_plates_df = (\n    all_plates_df.assign(Metadata_sample=lambda x: x.Metadata_Name+'_'+x.Metadata_mmoles_per_liter)\n)\n\nreplicating_corr_df = utils.corr_between_replicates_df(all_plates_df, 'Metadata_sample')\nreplicating_corr = list(replicating_corr_df.replicate_correlation)\nnull_replicating = utils.corr_between_non_replicates(all_plates_df, n_samples=n_samples, n_replicates=n_replicates, metadata_compound_name='Metadata_broad_sample')\n\nprop_95_replicating, value_95_replicating = utils.percent_score(null_replicating, replicating_corr, how='right')\n\ncorr_replicating_df = corr_replicating_df.append({'Description':f'Miami compounds',\n                                                  'Replicating':replicating_corr,\n                                                  'Null_Replicating':null_replicating,\n                                                  'Percent_Replicating':'%.1f'%prop_95_replicating,\n                                                  'Value_95':value_95_replicating}, ignore_index=True)\n\nconsensus_df = utils.consensus(all_plates_df, 'Metadata_sample')\n\nreplicating_corr_df[['Metadata_Name','Concentration']] = replicating_corr_df.Metadata_sample.str.split('_',expand=True)\n\nconsensus_df = consensus_df.merge(replicating_corr_df[['replicate_correlation', 'Metadata_sample']], on='Metadata_sample', how='left')\n\n\nprint(corr_replicating_df[['Description', 'Percent_Replicating']].to_markdown(index=False))\n\n| Description     |   Percent_Replicating |\n|:----------------|----------------------:|\n| Miami compounds |                  58.6 |\n\n\n\nutils.distribution_plot(df=corr_replicating_df, output_file=\"2.percent_replicating.png\", metric=\"Percent Replicating\")\n\n\n\n\n\n\n\n\n\nprint(replicating_corr_df.to_markdown(index=False))\n\n| Metadata_sample    |   replicate_correlation | Metadata_Name   | Concentration   |\n|:-------------------|------------------------:|:----------------|:----------------|\n| 2539-14_0.00457    |               0.405535  | 2539-14         | 0.00457         |\n| 2539-14_0.0137     |               0.829242  | 2539-14         | 0.0137          |\n| 2539-14_0.0412     |               0.297907  | 2539-14         | 0.0412          |\n| 2539-14_0.12346    |               0.975244  | 2539-14         | 0.12346         |\n| 2539-14_0.37037    |               0.123635  | 2539-14         | 0.37037         |\n| 2539-14_01.1111    |               0.959394  | 2539-14         | 01.1111         |\n| 2539-14_03.3333    |               0.287445  | 2539-14         | 03.3333         |\n| 2539-14_10.0       |               0.427402  | 2539-14         | 10.0            |\n| 2539-16_0.00457    |               0.0774158 | 2539-16         | 0.00457         |\n| 2539-16_0.0137     |               0.995092  | 2539-16         | 0.0137          |\n| 2539-16_0.0412     |               0.0932543 | 2539-16         | 0.0412          |\n| 2539-16_0.12346    |               0.39311   | 2539-16         | 0.12346         |\n| 2539-16_0.37037    |               0.29286   | 2539-16         | 0.37037         |\n| 2539-16_01.1111    |               0.341275  | 2539-16         | 01.1111         |\n| 2539-16_03.3333    |               0.152202  | 2539-16         | 03.3333         |\n| 2539-16_10.0       |               0.237503  | 2539-16         | 10.0            |\n| 278-O_unknown      |               0.319517  | 278-O           | unknown         |\n| 278-S_unknown      |               0.15181   | 278-S           | unknown         |\n| PF-4708671_0.00457 |               0.328545  | PF-4708671      | 0.00457         |\n| PF-4708671_0.0137  |               0.424049  | PF-4708671      | 0.0137          |\n| PF-4708671_0.0412  |               0.511737  | PF-4708671      | 0.0412          |\n| PF-4708671_0.12346 |               0.279716  | PF-4708671      | 0.12346         |\n| PF-4708671_0.37037 |               0.403821  | PF-4708671      | 0.37037         |\n| PF-4708671_01.1111 |               0.510094  | PF-4708671      | 01.1111         |\n| PF-4708671_03.3333 |               0.43649   | PF-4708671      | 03.3333         |\n| PF-4708671_10.0    |               0.568814  | PF-4708671      | 10.0            |\n| RO48_0.00457       |               0.309784  | RO48            | 0.00457         |\n| RO48_0.0137        |               0.503254  | RO48            | 0.0137          |\n| RO48_0.0412        |               0.477488  | RO48            | 0.0412          |\n| RO48_0.12346       |               0.580963  | RO48            | 0.12346         |\n| RO48_0.37037       |               0.651254  | RO48            | 0.37037         |\n| RO48_01.1111       |               0.983814  | RO48            | 01.1111         |\n| RO48_03.3333       |               0.999762  | RO48            | 03.3333         |\n| RO48_10.0          |               0.99974   | RO48            | 10.0            |\n| ROCKiIV_0.00457    |               0.500124  | ROCKiIV         | 0.00457         |\n| ROCKiIV_0.0137     |               0.168273  | ROCKiIV         | 0.0137          |\n| ROCKiIV_0.0412     |               0.492369  | ROCKiIV         | 0.0412          |\n| ROCKiIV_0.12346    |               0.214218  | ROCKiIV         | 0.12346         |\n| ROCKiIV_0.37037    |               0.424727  | ROCKiIV         | 0.37037         |\n| ROCKiIV_01.1111    |               0.414328  | ROCKiIV         | 01.1111         |\n| ROCKiIV_03.3333    |               0.790972  | ROCKiIV         | 03.3333         |\n| ROCKiIV_10.0       |               0.97933   | ROCKiIV         | 10.0            |\n| SBP2-B5_0.00457    |               0.261307  | SBP2-B5         | 0.00457         |\n| SBP2-B5_0.0137     |               0.583313  | SBP2-B5         | 0.0137          |\n| SBP2-B5_0.0412     |               0.446408  | SBP2-B5         | 0.0412          |\n| SBP2-B5_0.12346    |               0.552923  | SBP2-B5         | 0.12346         |\n| SBP2-B5_0.37037    |               0.317212  | SBP2-B5         | 0.37037         |\n| SBP2-B5_01.1111    |               0.461236  | SBP2-B5         | 01.1111         |\n| SBP2-B5_03.3333    |               0.338154  | SBP2-B5         | 03.3333         |\n| SBP2-B5_10.0       |               0.557598  | SBP2-B5         | 10.0            |\n| SBP926_0.00457     |               0.504746  | SBP926          | 0.00457         |\n| SBP926_0.0137      |               0.414793  | SBP926          | 0.0137          |\n| SBP926_0.0412      |               0.132735  | SBP926          | 0.0412          |\n| SBP926_0.12346     |               0.0629837 | SBP926          | 0.12346         |\n| SBP926_0.37037     |               0.333801  | SBP926          | 0.37037         |\n| SBP926_01.1111     |               0.660686  | SBP926          | 01.1111         |\n| SBP926_03.3333     |               0.643428  | SBP926          | 03.3333         |\n| SBP926_10.0        |               0.191084  | SBP926          | 10.0            |\n\n\n\nprint(corr_replicating_df[['Description', 'Value_95']].to_markdown(index=False))\n\n| Description     |   Value_95 |\n|:----------------|-----------:|\n| Miami compounds |   0.396857 |\n\n\n\nprint(replicating_corr_df[['Metadata_Name','Concentration','replicate_correlation']].to_markdown(index=False))\n\n| Metadata_Name   | Concentration   |   replicate_correlation |\n|:----------------|:----------------|------------------------:|\n| 2539-14         | 0.00457         |               0.405535  |\n| 2539-14         | 0.0137          |               0.829242  |\n| 2539-14         | 0.0412          |               0.297907  |\n| 2539-14         | 0.12346         |               0.975244  |\n| 2539-14         | 0.37037         |               0.123635  |\n| 2539-14         | 01.1111         |               0.959394  |\n| 2539-14         | 03.3333         |               0.287445  |\n| 2539-14         | 10.0            |               0.427402  |\n| 2539-16         | 0.00457         |               0.0774158 |\n| 2539-16         | 0.0137          |               0.995092  |\n| 2539-16         | 0.0412          |               0.0932543 |\n| 2539-16         | 0.12346         |               0.39311   |\n| 2539-16         | 0.37037         |               0.29286   |\n| 2539-16         | 01.1111         |               0.341275  |\n| 2539-16         | 03.3333         |               0.152202  |\n| 2539-16         | 10.0            |               0.237503  |\n| 278-O           | unknown         |               0.319517  |\n| 278-S           | unknown         |               0.15181   |\n| PF-4708671      | 0.00457         |               0.328545  |\n| PF-4708671      | 0.0137          |               0.424049  |\n| PF-4708671      | 0.0412          |               0.511737  |\n| PF-4708671      | 0.12346         |               0.279716  |\n| PF-4708671      | 0.37037         |               0.403821  |\n| PF-4708671      | 01.1111         |               0.510094  |\n| PF-4708671      | 03.3333         |               0.43649   |\n| PF-4708671      | 10.0            |               0.568814  |\n| RO48            | 0.00457         |               0.309784  |\n| RO48            | 0.0137          |               0.503254  |\n| RO48            | 0.0412          |               0.477488  |\n| RO48            | 0.12346         |               0.580963  |\n| RO48            | 0.37037         |               0.651254  |\n| RO48            | 01.1111         |               0.983814  |\n| RO48            | 03.3333         |               0.999762  |\n| RO48            | 10.0            |               0.99974   |\n| ROCKiIV         | 0.00457         |               0.500124  |\n| ROCKiIV         | 0.0137          |               0.168273  |\n| ROCKiIV         | 0.0412          |               0.492369  |\n| ROCKiIV         | 0.12346         |               0.214218  |\n| ROCKiIV         | 0.37037         |               0.424727  |\n| ROCKiIV         | 01.1111         |               0.414328  |\n| ROCKiIV         | 03.3333         |               0.790972  |\n| ROCKiIV         | 10.0            |               0.97933   |\n| SBP2-B5         | 0.00457         |               0.261307  |\n| SBP2-B5         | 0.0137          |               0.583313  |\n| SBP2-B5         | 0.0412          |               0.446408  |\n| SBP2-B5         | 0.12346         |               0.552923  |\n| SBP2-B5         | 0.37037         |               0.317212  |\n| SBP2-B5         | 01.1111         |               0.461236  |\n| SBP2-B5         | 03.3333         |               0.338154  |\n| SBP2-B5         | 10.0            |               0.557598  |\n| SBP926          | 0.00457         |               0.504746  |\n| SBP926          | 0.0137          |               0.414793  |\n| SBP926          | 0.0412          |               0.132735  |\n| SBP926          | 0.12346         |               0.0629837 |\n| SBP926          | 0.37037         |               0.333801  |\n| SBP926          | 01.1111         |               0.660686  |\n| SBP926          | 03.3333         |               0.643428  |\n| SBP926          | 10.0            |               0.191084  |\n\n\n\nfig = px.bar(data_frame=replicating_corr_df.sort_values(by=['Concentration']),\n             x='Metadata_Name',\n             y='replicate_correlation',\n             color='Concentration',\n             barmode='group')\nfig.update_xaxes(tickangle=45)\nfig.update_layout(bargap=0.3,bargroupgap=0.0,\n                  xaxis1=dict(title='Name'),\n                  xaxis2=dict(title='Name'),\n                  yaxis1=dict(title='Replicate correlation'),\n                  yaxis3=dict(title='Replicate correlation'))\nfig.show(\"png\")\nfig.write_image('figures/2.replicate_correlation_concentration.png', width=1000, height=750, scale=2)\n\n\n\n\n\n\n\n\n\nfig = px.bar(data_frame=replicating_corr_df.sort_values(by=['Concentration']),\n             x='Metadata_Name',\n             y='replicate_correlation',\n             facet_col='Concentration',\n             facet_col_wrap=3)\nfig.update_xaxes(tickangle=45)\nfig.update_layout(bargap=0.3,bargroupgap=0.0,\n                  xaxis1=dict(title='Name'),\n                  xaxis2=dict(title='Name'),\n                  xaxis3=dict(title='Name'),\n                  yaxis1=dict(title='Replicate correlation'),\n                  yaxis4=dict(title='Replicate correlation'),\n                  yaxis7=dict(title='Replicate correlation'))\nfig.show(\"png\")\nfig.write_image('figures/2.replicate_correlation_concentration_separate.png', width=1000, height=750, scale=2)\n\n\n\n\n\n\n\n\n\nfig = px.bar(data_frame=replicating_corr_df.sort_values(by=['Concentration']),\n             x='Metadata_Name',\n             y='replicate_correlation',\n             color='Concentration')\nfig.update_xaxes(tickangle=45)\nfig.update_layout(bargap=0.3,bargroupgap=0.0,\n                  xaxis1=dict(title='Name'),\n                  xaxis2=dict(title='Name'),\n                  yaxis1=dict(title='Replicate correlation'),\n                  yaxis3=dict(title='Replicate correlation'))\nfig.show(\"png\")\nfig.write_image('figures/2.replicate_correlation_concentration_stacked.png', width=1000, height=750, scale=2)"
  },
  {
    "objectID": "2021_04_26_MOA_UMiami/analysis/3.write-consensus-gct.html",
    "href": "2021_04_26_MOA_UMiami/analysis/3.write-consensus-gct.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport utils\nfrom pycytominer.cyto_utils import write_gct\n\n\nbatch = '2021_08_30_Batch13'\nplatemap = 'miami_platemap'\n\nexperiment_df = (\n    pd.read_csv('output/experiment-metadata.tsv', sep='\\t')\n    .query('Batch==@batch')\n    .query('Plate_Map_Name==@platemap')\n    .reset_index(drop=True)\n)\n\ncorr_replicating_df = pd.DataFrame()\nall_replicating_corr_df = pd.DataFrame()\nall_consensus_df = pd.DataFrame()\ngroup_by_feature = 'Metadata_broad_sample'\n\nexperiment_df.head()\n\n\n\n\n\n\n\n\n\nBatch\nPlate_Map_Name\nAssay_Plate_Barcode\n\n\n\n\n0\n2021_08_30_Batch13\nmiami_platemap\nBR00127153\n\n\n1\n2021_08_30_Batch13\nmiami_platemap\nBR00127154\n\n\n2\n2021_08_30_Batch13\nmiami_platemap\nBR00127152\n\n\n3\n2021_08_30_Batch13\nmiami_platemap\nBR00127150\n\n\n4\n2021_08_30_Batch13\nmiami_platemap\nBR00127151\n\n\n\n\n\n\n\n\n\nall_plates_df = pd.DataFrame()\n\nfor plate in experiment_df.Assay_Plate_Barcode.unique():\n    df = (\n        utils.load_data(batch, plate, \"normalized_feature_select_negcon_batch.csv.gz\")\n        .astype({'Metadata_mmoles_per_liter':str})\n        .rename(columns={'Metadata_Alternate Name': 'Metadata_Name'})\n    )\n\n    all_plates_df = utils.concat_profiles(all_plates_df, df)\n\nall_plates_df.Metadata_mmoles_per_liter.replace('nan', 'unknown', inplace=True)\nall_plates_df.Metadata_mmoles_per_liter.replace('1.1111', '01.1111', inplace=True)\nall_plates_df.Metadata_mmoles_per_liter.replace('3.3333', '03.3333', inplace=True)\n\nall_plates_df = (\n    all_plates_df.assign(Metadata_sample=lambda x: x.Metadata_Name+'_'+x.Metadata_mmoles_per_liter)\n)\n\nreplicating_corr_df = utils.corr_between_replicates_df(all_plates_df, 'Metadata_sample')\n\nconsensus_df = utils.consensus(all_plates_df, 'Metadata_sample')\n\nreplicating_corr_df[['Metadata_Name','Concentration']] = replicating_corr_df.Metadata_sample.str.split('_',expand=True)\n\nconsensus_df = consensus_df.merge(replicating_corr_df[['replicate_correlation', 'Metadata_sample']], on='Metadata_sample', how='left')\n\n\nconsensus_df.rename(columns={'replicate_correlation': 'Metadata_replicate_correlation'}, inplace=True)\nwrite_gct(consensus_df, 'output/consensus_profiles.gct')"
  },
  {
    "objectID": "2022_11_28_Wagner_MOA/workspace/analysis/5.create-gct-with-replicate-correlation.html",
    "href": "2022_11_28_Wagner_MOA/workspace/analysis/5.create-gct-with-replicate-correlation.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport utils\nimport numpy as np\nfrom pycytominer.cyto_utils import write_gct\n\n\nexperiment_df = pd.read_csv('output/experiment-metadata.tsv', sep='\\t')\n\ncorr_replicating_df = pd.DataFrame()\ngroup_by_feature = 'Metadata_broad_sample'\n\n\nall_plates_df = pd.DataFrame()\n\nfor i, plate in enumerate(experiment_df.Assay_Plate_Barcode.unique()):\n    batch = experiment_df.loc[i, 'Batch']\n    df = (\n        pd.read_csv(f'../profiles/{batch}/{plate}/{plate}_normalized_feature_select_negcon_batch.csv.gz')\n    )\n    all_plates_df = utils.concat_profiles(all_plates_df, df)\n\nall_plates_df = utils.remove_all_control_empty_wells(all_plates_df)\n\nall_plates_conc_1_df = utils.remove_all_control_empty_wells(all_plates_df.query('Metadata_mmoles_per_liter==1'))\nall_plates_conc_4_df = utils.remove_all_control_empty_wells(all_plates_df.query('Metadata_mmoles_per_liter==4'))\n\nall_plates_conc_1_consensus_df = utils.consensus(all_plates_conc_1_df, 'Metadata_broad_sample')\nall_plates_conc_4_consensus_df = utils.consensus(all_plates_conc_4_df, 'Metadata_broad_sample')\n\n\nreplicating_corr_conc_1_df = (\n    utils.corr_between_replicates_df(all_plates_conc_1_df, group_by_feature)\n    .rename(columns={'replicate_correlation': 'Metadata_replicate_correlation'})\n)\nreplicating_corr_conc_4_df = (\n    utils.corr_between_replicates_df(all_plates_conc_4_df, group_by_feature)\n    .rename(columns={'replicate_correlation': 'Metadata_replicate_correlation'})\n)\n\nall_plates_conc_1_consensus_df = all_plates_conc_1_consensus_df.merge(replicating_corr_conc_1_df, on='Metadata_broad_sample', how='left')\nall_plates_conc_4_consensus_df = all_plates_conc_4_consensus_df.merge(replicating_corr_conc_4_df, on='Metadata_broad_sample', how='left')\n\ncorr_df = pd.concat([all_plates_conc_1_consensus_df, all_plates_conc_4_consensus_df], ignore_index=True, join='inner')\n\n\n# Write gct files using consensus profiles\nwrite_gct(corr_df, 'output/consensus_profiles.gct')"
  },
  {
    "objectID": "2021_03_11_MolecularGlue_AmitChoudharyLab/analysis/1.visualize-platemap.html",
    "href": "2021_03_11_MolecularGlue_AmitChoudharyLab/analysis/1.visualize-platemap.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport utils\nimport matplotlib.pyplot as plt\n\n\nbatch = '2021_04_17_Batch1'\nplatemap = 'C-7210-01-CMP-015'\n\nplatemap_df = pd.read_csv(f'../metadata/platemaps/{batch}/platemap/{platemap}.txt', sep='\\t')\nmetadata_df = pd.read_csv(f'../metadata/external_metadata/glue_metadata.tsv', sep='\\t')\n\nplatemap_metadata_df = platemap_df.merge(metadata_df, on='broad_sample', how='left')\nplatemap_metadata_df.head()\n\n\n\n\n\n\n\n\n\nplate_map_name\nwell_position\nbroad_sample\nmg_per_ml\nmmoles_per_liter\nsolvent\nSupplier_Catalog\npert_type\ncontrol_type\n\n\n\n\n0\nC-7210-01-CMP-015\nA01\nNaN\nNaN\nNaN\nDMSO\nDMSO\ncontrol\nnegcon\n\n\n1\nC-7210-01-CMP-015\nA02\nNaN\nNaN\nNaN\nDMSO\nDMSO\ncontrol\nnegcon\n\n\n2\nC-7210-01-CMP-015\nA03\nNaN\nNaN\nNaN\nDMSO\nDMSO\ncontrol\nnegcon\n\n\n3\nC-7210-01-CMP-015\nA04\nBRD-U00088121-001-01-9\nNaN\n4.0\nDMSO\nImatinib\ntrt\nNaN\n\n\n4\nC-7210-01-CMP-015\nA05\nBRD-U00088012-001-01-9\nNaN\n4.0\nDMSO\nVS989\ntrt\nNaN\n\n\n\n\n\n\n\n\n\nutils.draw_plates(platemap_metadata_df)\nplt.savefig('figures/1.platemap.png')"
  },
  {
    "objectID": "2021_03_11_MolecularGlue_AmitChoudharyLab/analysis/3.calculate-control-percent-replicating.html",
    "href": "2021_03_11_MolecularGlue_AmitChoudharyLab/analysis/3.calculate-control-percent-replicating.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport utils\nimport matplotlib.pyplot as plt\nimport random\n\nrandom.seed(9000)\n\nplt.style.use(\"seaborn-ticks\")\nplt.rcParams[\"image.cmap\"] = \"Set1\"\nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=plt.cm.Set1.colors)\n%matplotlib inline\n\nIn this notebook we calculate Percent Replicating of the DMSO wells by considering DMSO in the same position to be replicates. This is done to estimate position effects. The following are the steps taken\n\nNormalized, feature selected profiles are read and the replicate plates are merged into a single dataframe.\nAll treatment, Positive control and empty wells are removed from the dataframe.\nThe signal distribution, which is the median pairwise replicate correlation, is computed for each replicate.\nThe null distribution, which is the median pairwise correlation of non-replicates, is computed for 1000 combinations of non-replicates.\nPercent Replicating is computed as the percentage of the signal distribution that is the greater than the 95th percentile of null distribution.\nThe signal and noise distributions and the Percent Replicating values are plotted and the table of Percent Replicating is printed.\n\n\nexperiment_df = pd.read_csv('output/experiment-metadata.tsv', sep='\\t')\n\ncorr_replicating_df = pd.DataFrame()\ngroup_by_feature = 'Metadata_Well'\nn_replicates = experiment_df.shape[0]\nn_samples = 1000\n\n\nall_plates_df = pd.DataFrame()\n\nfor i, plate in enumerate(experiment_df.Assay_Plate_Barcode.unique()):\n    batch = experiment_df.loc[i, 'Batch']\n    df = (\n        pd.read_csv(f'../profiles/{batch}/{plate}/{plate}_normalized_feature_select_batch.csv.gz')\n    )\n    all_plates_df = utils.concat_profiles(all_plates_df, df)\n\nall_plates_df = all_plates_df[all_plates_df.Metadata_control_type==\"negcon\"]\n\n\nreplicating_corr_df = utils.corr_between_replicates_df(all_plates_df, group_by_feature)\nreplicating_corr = replicating_corr_df.replicate_correlation\nnull_replicating = utils.corr_between_non_replicates(all_plates_df, n_samples, n_replicates, group_by_feature)\n\nprop_95_replicating, value_95_replicating = utils.percent_score(null_replicating, replicating_corr, how='right')\n\ncorr_replicating_df = corr_replicating_df.append({'Description':f'DMSO wells',\n                                                  'Replicating':replicating_corr,\n                                                  'Null_Replicating':null_replicating,\n                                                  'Percent_Replicating':'%.1f'%prop_95_replicating,\n                                                  'Value_95':value_95_replicating}, ignore_index=True)\n\n\nprint(corr_replicating_df[['Description', 'Percent_Replicating']].to_markdown(index=False))\n\n| Description   |   Percent_Replicating |\n|:--------------|----------------------:|\n| DMSO wells    |                  54.4 |\n\n\n\nutils.distribution_plot(df=corr_replicating_df, output_file=\"3.control_percent_replicating_position.png\", metric=\"Percent Replicating\")"
  },
  {
    "objectID": "2021_03_11_MolecularGlue_AmitChoudharyLab/analysis/0.create-experiment-metadata.html",
    "href": "2021_03_11_MolecularGlue_AmitChoudharyLab/analysis/0.create-experiment-metadata.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\n\nCreate experiment metadata table using barcode_platemap.csv\n\ncol_order = ['Batch', 'Plate_Map_Name','Assay_Plate_Barcode', 'Cell_Type']\nbatch = '2021_04_17_Batch1'\ndf = (\n    pd.read_csv(f'../metadata/platemaps/{batch}/barcode_platemap.csv')\n    .assign(Batch=batch)\n    .assign(Cell_Type='U2OS')\n)\n\ndf[col_order].to_csv('output/experiment-metadata.tsv', index=False, sep='\\t')"
  },
  {
    "objectID": "2021_04_26_MOA_PRISM/analysis/1.visualize-platemap.html",
    "href": "2021_04_26_MOA_PRISM/analysis/1.visualize-platemap.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport utils\nimport matplotlib.pyplot as plt\n\n\nbatch = '2021_08_23_Batch12'\nplatemap = 'prism_platemap'\n\nplatemap_df = pd.read_csv(f'../metadata/platemaps/{batch}/platemap/{platemap}.txt', sep='\\t')\nmetadata_df = pd.read_csv(f'../metadata/external_metadata/prism_metadata.tsv', sep='\\t')\n\nplatemap_metadata_df = platemap_df.merge(metadata_df, on='broad_sample', how='left')\nplatemap_metadata_df.head()\n\n\n\n\n\n\n\n\n\nplate_map_name\nwell_position\nbroad_sample\nmg_per_ml\nmmoles_per_liter\nsolvent\npert_type\ncontrol_type\n\n\n\n\n0\nprism_platemap\nA01\nBRD-K21728777-001-02-3\n2.507000\n4.978375\nDMSO\ncontrol\nposcon\n\n\n1\nprism_platemap\nA02\nNaN\nNaN\nNaN\nDMSO\ncontrol\nnegcon\n\n\n2\nprism_platemap\nA03\nBRD-K00005265-001-03-9\n3.754668\n10.000000\nDMSO\ntrt\nNaN\n\n\n3\nprism_platemap\nA04\nBRD-K00005265-001-03-9\n0.417185\n1.111111\nDMSO\ntrt\nNaN\n\n\n4\nprism_platemap\nA05\nBRD-K89714990-001-03-1\n3.858440\n10.000000\nDMSO\ntrt\nNaN\n\n\n\n\n\n\n\n\n\nutils.draw_plates(platemap_metadata_df)\nplt.savefig('figures/1.platemap.png')"
  },
  {
    "objectID": "2021_04_26_MOA_PRISM/analysis/5.download_images.html",
    "href": "2021_04_26_MOA_PRISM/analysis/5.download_images.html",
    "title": "",
    "section": "",
    "text": "import random\nimport pandas as pd\nimport os\nimport numpy as np\nfrom tqdm import tqdm\n\nrandom.seed(9000)\n\n\ns3 = 'aws s3 sync '\nprefix = '--profile jump-cp-role --acl bucket-owner-full-control'\nbucket = 's3://cellpainting-gallery'\nproject = 'jump'\nsource = 'source_4'\nbatch = '2021_08_30_Batch13'\nsuffix = '--profile jump-cp-role --acl bucket-owner-full-control'\n\nfield = \"01\" # specific field of view\n\nplates = ['BR00127153__2021-09-18T08_47_33-Measurement1',\n          'BR00127154__2021-09-18T17_12_50-Measurement1',\n          'BR00127152__2021-09-22T02_21_03-Measurement1',\n          'BR00127150__2021-09-22T10_43_40-Measurement1',\n          'BR00127151__2021-09-22T22_16_41-Measurement1']\n\nlocation_of_platemap = '../metadata/platemaps/2021_08_30_Batch13/platemap/prism_platemap.txt'\nlocation_of_metadata = '../metadata/external_metadata/JUMP-Target-2_compound_metadata.tsv'\nlocation_of_compounds = 'input/compounds.csv'\n\n\n# Merge metadata and plate map\nplatemap_df = pd.read_csv(\n    location_of_platemap, delimiter=\"\\t\", usecols=[\"broad_sample\", \"well_position\", \"mmoles_per_liter\"]\n)\nmetadata_df = pd.read_csv(\n    location_of_metadata, delimiter=\"\\t\", usecols=[\"broad_sample\", \"pert_iname\"]\n)\n\nplatemap_metadata_df = platemap_df.merge(metadata_df, on=\"broad_sample\", how='left')\nplatemap_metadata_df.broad_sample.replace(np.nan, \"DMSO\", inplace=True)\nplatemap_metadata_df.head()\n\n\n\n\n\n\n\n\n\nwell_position\nbroad_sample\nmmoles_per_liter\npert_iname\n\n\n\n\n0\nA01\nBRD-K21728777-001-02-3\n4.978375\nAMG900\n\n\n1\nA02\nDMSO\nNaN\nDMSO\n\n\n2\nA03\nBRD-K00005265-001-03-9\n10.000000\nNaN\n\n\n3\nA04\nBRD-K00005265-001-03-9\n1.111111\nNaN\n\n\n4\nA05\nBRD-K89714990-001-03-1\n10.000000\nNaN\n\n\n\n\n\n\n\n\n\ncompounds_df = (\n    pd.read_csv(location_of_compounds)\n)\ncompounds_df.head(10)\n\n\n\n\n\n\n\n\n\nbroad_sample\npert_type\n\n\n\n\n0\nBRD-K89714990-001-03-1\ntrt\n\n\n1\nBRD-K67712442-001-06-9\ntrt\n\n\n2\nBRD-K65179645-001-10-9\ntrt\n\n\n3\nBRD-K38408496-001-05-9\ntrt\n\n\n4\nBRD-K37670250-001-04-9\ntrt\n\n\n5\nBRD-K00027789-001-01-9\ntrt\n\n\n6\nBRD-K00005265-001-03-9\ntrt\n\n\n7\nBRD-K00003792-001-02-9\ntrt\n\n\n\n\n\n\n\n\n\n# Merge metadata and plate map with compound list\ncompounds_df = platemap_metadata_df.merge(compounds_df, on=\"broad_sample\", how=\"inner\")\ncompounds_df.head(20)\n\n\n\n\n\n\n\n\n\nwell_position\nbroad_sample\nmmoles_per_liter\npert_iname\npert_type\n\n\n\n\n0\nA03\nBRD-K00005265-001-03-9\n10.000000\nNaN\ntrt\n\n\n1\nA04\nBRD-K00005265-001-03-9\n1.111111\nNaN\ntrt\n\n\n2\nA13\nBRD-K00005265-001-03-9\n3.333333\nNaN\ntrt\n\n\n3\nA14\nBRD-K00005265-001-03-9\n0.370370\nNaN\ntrt\n\n\n4\nB03\nBRD-K00005265-001-03-9\n0.123457\nNaN\ntrt\n\n\n5\nB04\nBRD-K00005265-001-03-9\n0.013700\nNaN\ntrt\n\n\n6\nB13\nBRD-K00005265-001-03-9\n0.041200\nNaN\ntrt\n\n\n7\nB14\nBRD-K00005265-001-03-9\n0.004570\nNaN\ntrt\n\n\n8\nA05\nBRD-K89714990-001-03-1\n10.000000\nNaN\ntrt\n\n\n9\nA06\nBRD-K89714990-001-03-1\n1.111111\nNaN\ntrt\n\n\n10\nA15\nBRD-K89714990-001-03-1\n3.333333\nNaN\ntrt\n\n\n11\nA16\nBRD-K89714990-001-03-1\n0.370370\nNaN\ntrt\n\n\n12\nB05\nBRD-K89714990-001-03-1\n0.123457\nNaN\ntrt\n\n\n13\nB06\nBRD-K89714990-001-03-1\n0.013700\nNaN\ntrt\n\n\n14\nB15\nBRD-K89714990-001-03-1\n0.041200\nNaN\ntrt\n\n\n15\nB16\nBRD-K89714990-001-03-1\n0.004570\nNaN\ntrt\n\n\n16\nE11\nBRD-K67712442-001-06-9\n10.000000\nNaN\ntrt\n\n\n17\nE12\nBRD-K67712442-001-06-9\n1.111111\nNaN\ntrt\n\n\n18\nE21\nBRD-K67712442-001-06-9\n3.333333\nNaN\ntrt\n\n\n19\nE22\nBRD-K67712442-001-06-9\n0.370370\nNaN\ntrt\n\n\n\n\n\n\n\n\n\n# Add DMSO (a single well \"A02\" chosen at random)\n\ncompounds_df = compounds_df.append({'broad_sample':'DMSO',\n                                    'well_position':'A02',\n                                    'pert_iname':'DMSO',\n                                    'pert_type':'control',\n                                    'mmoles_per_liter':0}, ignore_index=True)\ncompounds_df.tail(10)\n\n\n\n\n\n\n\n\n\nwell_position\nbroad_sample\nmmoles_per_liter\npert_iname\npert_type\n\n\n\n\n55\nP18\nBRD-K00027789-001-01-9\n0.004570\nNaN\ntrt\n\n\n56\nO11\nBRD-K38408496-001-05-9\n10.000000\nNaN\ntrt\n\n\n57\nO12\nBRD-K38408496-001-05-9\n1.111111\nNaN\ntrt\n\n\n58\nO21\nBRD-K38408496-001-05-9\n3.333333\nNaN\ntrt\n\n\n59\nO22\nBRD-K38408496-001-05-9\n0.370370\nNaN\ntrt\n\n\n60\nP11\nBRD-K38408496-001-05-9\n0.123457\nNaN\ntrt\n\n\n61\nP12\nBRD-K38408496-001-05-9\n0.013700\nNaN\ntrt\n\n\n62\nP21\nBRD-K38408496-001-05-9\n0.041200\nNaN\ntrt\n\n\n63\nP22\nBRD-K38408496-001-05-9\n0.004570\nNaN\ntrt\n\n\n64\nA02\nDMSO\n0.000000\nDMSO\ncontrol\n\n\n\n\n\n\n\n\n\ncompounds_df = (\n    compounds_df\n        .assign(row=lambda x: x.well_position.str[0:1])\n        .assign(column=lambda x: x.well_position.str[1:])\n)\ncompounds_df.head(10)\n\n\n\n\n\n\n\n\n\nwell_position\nbroad_sample\nmmoles_per_liter\npert_iname\npert_type\nrow\ncolumn\n\n\n\n\n0\nA03\nBRD-K00005265-001-03-9\n10.000000\nNaN\ntrt\nA\n03\n\n\n1\nA04\nBRD-K00005265-001-03-9\n1.111111\nNaN\ntrt\nA\n04\n\n\n2\nA13\nBRD-K00005265-001-03-9\n3.333333\nNaN\ntrt\nA\n13\n\n\n3\nA14\nBRD-K00005265-001-03-9\n0.370370\nNaN\ntrt\nA\n14\n\n\n4\nB03\nBRD-K00005265-001-03-9\n0.123457\nNaN\ntrt\nB\n03\n\n\n5\nB04\nBRD-K00005265-001-03-9\n0.013700\nNaN\ntrt\nB\n04\n\n\n6\nB13\nBRD-K00005265-001-03-9\n0.041200\nNaN\ntrt\nB\n13\n\n\n7\nB14\nBRD-K00005265-001-03-9\n0.004570\nNaN\ntrt\nB\n14\n\n\n8\nA05\nBRD-K89714990-001-03-1\n10.000000\nNaN\ntrt\nA\n05\n\n\n9\nA06\nBRD-K89714990-001-03-1\n1.111111\nNaN\ntrt\nA\n06\n\n\n\n\n\n\n\n\n\n# Convert row name to int\ncompounds_df.row.replace(\n    [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"],\n    [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"],\n    inplace=True,\n)\n\ncompounds_df.head()\n\n\n\n\n\n\n\n\n\nwell_position\nbroad_sample\nmmoles_per_liter\npert_iname\npert_type\nrow\ncolumn\n\n\n\n\n0\nA03\nBRD-K00005265-001-03-9\n10.000000\nNaN\ntrt\n01\n03\n\n\n1\nA04\nBRD-K00005265-001-03-9\n1.111111\nNaN\ntrt\n01\n04\n\n\n2\nA13\nBRD-K00005265-001-03-9\n3.333333\nNaN\ntrt\n01\n13\n\n\n3\nA14\nBRD-K00005265-001-03-9\n0.370370\nNaN\ntrt\n01\n14\n\n\n4\nB03\nBRD-K00005265-001-03-9\n0.123457\nNaN\ntrt\n02\n03\n\n\n\n\n\n\n\n\n\n# Download the images\nfor i in tqdm(range(len(compounds_df))):\n    row = f'r{compounds_df.loc[i, \"row\"]}'\n    column = f'c{compounds_df.loc[i, \"column\"]}'\n    compound = f'{compounds_df.loc[i, \"broad_sample\"]}'\n    concentration = f'{compounds_df.loc[i, \"mmoles_per_liter\"]}'\n\n    if not os.path.isdir(f'./prism_compounds/{compound}'):\n        cmd = f\"./prism_compounds/{compound}_{concentration}\"\n        os.makedirs(cmd)\n\n    plate = random.choice(plates) # choose a random replicate\n    cmd = (\n        f\"{s3}\"\n        f\"{prefix}\"\n        f\" {bucket}/\"\n        f\"{project}/\"\n        f\"{source}/\"\n        f\"images/\"\n        f\"{batch}/\"\n        f\"images/\"\n        f\"{plate}/\"\n        f\"Images/\"\n        f\" prism_compounds/{compound}_{concentration}/ \"\n        f'--exclude \"*\" '\n        f'--include \"{row}{column}f{field}*.tiff\"')\n        # f'--dryrun'\n    os.system(cmd)\n\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 65/65 [35:31&lt;00:00, 32.79s/it]"
  },
  {
    "objectID": "2021_04_26_MOA_PRISM/analysis/3.write-consensus-gct.html",
    "href": "2021_04_26_MOA_PRISM/analysis/3.write-consensus-gct.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport utils\nfrom pycytominer.cyto_utils import write_gct\n\n\nbatch = '2021_08_30_Batch13'\nplatemap = 'prism_platemap'\n\nexperiment_df = (\n    pd.read_csv('output/experiment-metadata.tsv', sep='\\t')\n    .query('Batch==@batch')\n    .query('Plate_Map_Name==@platemap')\n    .reset_index(drop=True)\n)\n\ncorr_replicating_df = pd.DataFrame()\nall_replicating_corr_df = pd.DataFrame()\nall_consensus_df = pd.DataFrame()\ngroup_by_feature = 'Metadata_broad_sample'\n\nexperiment_df.head()\n\n\n\n\n\n\n\n\n\nBatch\nPlate_Map_Name\nAssay_Plate_Barcode\n\n\n\n\n0\n2021_08_30_Batch13\nprism_platemap\nBR00127153\n\n\n1\n2021_08_30_Batch13\nprism_platemap\nBR00127154\n\n\n2\n2021_08_30_Batch13\nprism_platemap\nBR00127152\n\n\n3\n2021_08_30_Batch13\nprism_platemap\nBR00127150\n\n\n4\n2021_08_30_Batch13\nprism_platemap\nBR00127151\n\n\n\n\n\n\n\n\n\nall_plates_df = pd.DataFrame()\n\nfor plate in experiment_df.Assay_Plate_Barcode.unique():\n    df = (\n        utils.load_data(batch, plate, \"normalized_feature_select_negcon_batch.csv.gz\")\n        .astype({'Metadata_mmoles_per_liter':str})\n    )\n\n    all_plates_df = utils.concat_profiles(all_plates_df, df)\n\nall_plates_df.Metadata_broad_sample.fillna('DMSO', inplace=True)\nall_plates_df.Metadata_mmoles_per_liter.replace('nan', 'unknown', inplace=True)\nall_plates_df.Metadata_mmoles_per_liter.replace('1.1111', '01.1111', inplace=True)\nall_plates_df.Metadata_mmoles_per_liter.replace('3.3333', '03.3333', inplace=True)\n\n\nall_plates_df = (\n    all_plates_df.assign(Metadata_sample=lambda x: x.Metadata_broad_sample+'_'+x.Metadata_mmoles_per_liter)\n)\n\nreplicating_corr_df = utils.corr_between_replicates_df(all_plates_df, 'Metadata_sample')\n\nconsensus_df = utils.consensus(all_plates_df, 'Metadata_sample')\n\nreplicating_corr_df[['Metadata_broad_sample','Concentration']] = replicating_corr_df.Metadata_sample.str.split('_',expand=True)\n\nconsensus_df = consensus_df.merge(replicating_corr_df[['replicate_correlation', 'Metadata_sample']], on='Metadata_sample', how='left')\n\n\nconsensus_df.rename(columns={'replicate_correlation': 'Metadata_replicate_correlation'}, inplace=True)\nwrite_gct(consensus_df, 'output/consensus_profiles.gct')"
  }
]