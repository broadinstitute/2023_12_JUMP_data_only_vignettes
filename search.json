[
  {
    "objectID": "howto/tutorial_basic.html",
    "href": "howto/tutorial_basic.html",
    "title": "Basic JUMP data access",
    "section": "",
    "text": "This is a tutorial on how to access profiles from the JUMP Cell Painting datasets. We will use polars to fetch the data frames lazily, with the help of s3fs and pyarrow. We prefer lazy loading because the data can be too big to be handled in memory.\n\n\nCode\nimport polars as pl\nfrom pyarrow.dataset import dataset\nfrom s3fs import S3FileSystem\n\n\nThe shapes of the available datasets are:\n\ncpg0016-jump[crispr]: CRISPR knockouts genetic perturbations.\ncpg0016-jump[orf]: Overexpression genetic perturbations.\ncpg0016-jump[compound]: Chemical perturbations.\n\nTheir explicit location is determined by the transformations that produce the datasets. The aws paths of the dataframes are built from a prefix below:\n\n\nCode\nINDEX_FILE = \"https://raw.githubusercontent.com/jump-cellpainting/datasets/50cd2ab93749ccbdb0919d3adf9277c14b6343dd/manifests/profile_index.csv\"\n\n\nWe use a version-controlled csv to release the latest corrected profiles\n\n\nCode\nprofile_index = pl.read_csv(INDEX_FILE)\nprofile_index.head()\n\n\n\nshape: (5, 3)\n\n\n\nsubset\nurl\netag\n\n\nstr\nstr\nstr\n\n\n\n\n\"orf\"\n\"https://cellpainting-gallery.s…\n\"c05a241135dcedda4e9cc639480b3f…\n\n\n\"crispr\"\n\"https://cellpainting-gallery.s…\n\"4c59782c0dd5244f67d14323e83258…\n\n\n\"compound\"\n\"https://cellpainting-gallery.s…\n\"1368a48ddbd4c44b1bfbc084591aaf…\n\n\n\"orf_interpretable\"\n\"https://cellpainting-gallery.s…\n\"97b0c31d7d678ca2a5e2353df5799f…\n\n\n\"crispr_interpretable\"\n\"https://cellpainting-gallery.s…\n\"90b08b824c06bcf16dfc5e788e74f0…\n\n\n\n\n\n\nWe do not need the ‘etag’ (used to check file integrity) column nor the ‘interpretable’ (i.e., before major modifications)\n\n\nCode\nselected_profiles = profile_index.filter(\n    pl.col(\"subset\").is_in((\"crispr\", \"orf\", \"compound\"))\n).select(pl.exclude(\"etag\"))\nfilepaths = dict(selected_profiles.iter_rows())\nprint(filepaths)\n\n\n{'orf': 'https://cellpainting-gallery.s3.amazonaws.com/cpg0016-jump-assembled/source_all/workspace/profiles/jump-profiling-recipe_2024_a917fa7/ORF/profiles_wellpos_cc_var_mad_outlier_featselect_sphering_harmony/profiles_wellpos_cc_var_mad_outlier_featselect_sphering_harmony.parquet', 'crispr': 'https://cellpainting-gallery.s3.amazonaws.com/cpg0016-jump-assembled/source_all/workspace/profiles/jump-profiling-recipe_2024_a917fa7/CRISPR/profiles_wellpos_cc_var_mad_outlier_featselect_sphering_harmony_PCA_corrected/profiles_wellpos_cc_var_mad_outlier_featselect_sphering_harmony_PCA_corrected.parquet', 'compound': 'https://cellpainting-gallery.s3.amazonaws.com/cpg0016-jump-assembled/source_all/workspace/profiles/jump-profiling-recipe_2024_a917fa7/COMPOUND/profiles_var_mad_int_featselect_harmony/profiles_var_mad_int_featselect_harmony.parquet'}\n\n\nWe will lazy-load the dataframes and print the number of rows and columns\n\n\nCode\ninfo = {k: [] for k in (\"dataset\", \"#rows\", \"#cols\", \"#Metadata cols\", \"Size (MB)\")}\nfor name, path in filepaths.items():\n    data = pl.scan_parquet(path)\n    n_rows = data.select(pl.len()).collect().item()\n    schema = data.collect_schema()\n    metadata_cols = [col for col in schema.keys() if col.startswith(\"Metadata\")]\n    n_cols = schema.len()\n    n_meta_cols = len(metadata_cols)\n    estimated_size = int(round(4.03 * n_rows * n_cols / 1e6, 0))  # B -&gt; MB\n    for k, v in zip(info.keys(), (name, n_rows, n_cols, n_meta_cols, estimated_size)):\n        info[k].append(v)\n\npl.DataFrame(info)\n\n\n\nshape: (3, 5)\n\n\n\ndataset\n#rows\n#cols\n#Metadata cols\nSize (MB)\n\n\nstr\ni64\ni64\ni64\ni64\n\n\n\n\n\"orf\"\n81660\n726\n4\n239\n\n\n\"crispr\"\n51185\n263\n4\n54\n\n\n\"compound\"\n803853\n741\n4\n2400\n\n\n\n\n\n\nLet us now focus on the crispr dataset and use a regex to select the metadata columns. We will then sample rows and display the overview. Note that the collect() method enforces loading some data into memory.\n\n\nCode\ndata = pl.scan_parquet(filepaths[\"crispr\"])\ndata.select(pl.col(\"^Metadata.*$\").sample(n=5, seed=1)).collect()\n\n\n\nshape: (5, 4)\n\n\n\nMetadata_Source\nMetadata_Plate\nMetadata_Well\nMetadata_JCP2022\n\n\nstr\nstr\nstr\nstr\n\n\n\n\n\"source_13\"\n\"CP-CC9-R2-15\"\n\"D02\"\n\"JCP2022_800002\"\n\n\n\"source_13\"\n\"CP-CC9-R1-04\"\n\"J18\"\n\"JCP2022_800028\"\n\n\n\"source_13\"\n\"CP-CC9-R2-04\"\n\"J09\"\n\"JCP2022_807421\"\n\n\n\"source_13\"\n\"CP-CC9-R2-26\"\n\"L14\"\n\"JCP2022_807129\"\n\n\n\"source_13\"\n\"CP-CC9-R6-01\"\n\"C12\"\n\"JCP2022_806640\"\n\n\n\n\n\n\nThe following line excludes the metadata columns:\n\n\nCode\ndata_only = data.select(pl.all().exclude(\"^Metadata.*$\").sample(n=5, seed=1)).collect()\ndata_only\n\n\n\nshape: (5, 259)\n\n\n\nX_1\nX_2\nX_3\nX_4\nX_5\nX_6\nX_7\nX_8\nX_9\nX_10\nX_11\nX_12\nX_13\nX_14\nX_15\nX_16\nX_17\nX_18\nX_19\nX_20\nX_21\nX_22\nX_23\nX_24\nX_25\nX_26\nX_27\nX_28\nX_29\nX_30\nX_31\nX_32\nX_33\nX_34\nX_35\nX_36\nX_37\n…\nX_223\nX_224\nX_225\nX_226\nX_227\nX_228\nX_229\nX_230\nX_231\nX_232\nX_233\nX_234\nX_235\nX_236\nX_237\nX_238\nX_239\nX_240\nX_241\nX_242\nX_243\nX_244\nX_245\nX_246\nX_247\nX_248\nX_249\nX_250\nX_251\nX_252\nX_253\nX_254\nX_255\nX_256\nX_257\nX_258\nX_259\n\n\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\n…\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\n\n\n\n\n0.431689\n0.121776\n-0.288611\n1.199042\n-0.758412\n-0.466926\n-0.777705\n-0.081231\n-0.619822\n-1.27128\n-0.373444\n0.755662\n-0.271196\n-0.219682\n0.268569\n-0.831324\n-0.916929\n0.128514\n0.202126\n-0.448374\n0.57358\n-0.148984\n-0.451346\n-0.863105\n-0.519879\n-0.485649\n0.067051\n-0.461362\n-0.87479\n0.060438\n-0.86988\n-0.053304\n0.479346\n0.415922\n0.55612\n0.057157\n-0.486731\n…\n0.070464\n0.011686\n-0.071482\n0.047634\n-0.137811\n0.010114\n-0.146834\n0.028652\n0.048453\n0.015478\n-0.371927\n-0.318295\n-0.07663\n0.099552\n-0.067174\n0.324664\n0.11507\n0.07018\n0.149843\n0.090655\n-0.024452\n-0.167478\n-0.063188\n0.10028\n-0.20603\n-0.143531\n-0.042267\n-0.103231\n0.166172\n0.268637\n-0.249552\n-0.125842\n-0.010658\n0.148293\n-0.002996\n0.018602\n0.120415\n\n\n-0.286125\n-0.139647\n0.521229\n-0.130772\n-0.392223\n-0.478905\n-2.190718\n-0.910039\n-0.923397\n-0.89992\n0.809614\n0.195752\n1.051458\n-0.586142\n0.132069\n0.691497\n2.309921\n0.451202\n0.017881\n0.722985\n0.094764\n0.458089\n0.289687\n-0.005019\n-0.44384\n-0.292192\n-0.661437\n-0.480588\n-0.43835\n0.392833\n0.883042\n-0.183804\n-0.63443\n0.088329\n0.317562\n0.790481\n0.49558\n…\n0.12586\n0.150716\n0.092419\n0.070398\n-0.10096\n0.241489\n-0.02793\n-0.069464\n0.173498\n0.096578\n-0.006984\n-0.010409\n-0.122357\n-0.154975\n-0.264336\n-0.026424\n-0.107131\n-0.217108\n-0.076673\n-0.025199\n0.178872\n0.273566\n-0.011964\n-0.284162\n-0.07764\n-0.147836\n-0.030516\n0.039593\n-0.251191\n-0.145978\n-0.061276\n0.260967\n0.136172\n0.220407\n-0.016074\n0.24593\n-0.051766\n\n\n0.044537\n0.093762\n0.38071\n-0.078268\n-0.332677\n-0.492756\n-0.54244\n-0.751058\n0.28314\n0.772951\n-0.344511\n-0.291534\n-0.64803\n1.04816\n0.814905\n0.020586\n-1.699232\n-0.35928\n0.474136\n-0.500731\n0.16648\n0.460551\n0.773349\n-0.584125\n0.070497\n0.382738\n1.290578\n1.115024\n0.656066\n-0.211548\n0.615551\n1.202399\n0.61274\n0.467623\n0.826743\n0.98965\n0.515379\n…\n-0.035649\n0.084653\n-0.148614\n0.41456\n-0.035386\n0.039774\n0.222122\n0.127807\n0.212482\n-0.087575\n0.149949\n-0.146337\n0.031107\n0.048564\n-0.151519\n-0.256957\n-0.147494\n-0.051771\n0.000703\n-0.100694\n0.127297\n-0.159605\n0.056752\n0.079783\n-0.301415\n-0.033567\n-0.073402\n0.073441\n0.003454\n-0.065908\n0.003793\n0.017154\n0.122071\n0.031753\n-0.115469\n-0.183939\n-0.037042\n\n\n0.045477\n0.020634\n0.312316\n1.316\n-0.831466\n-1.536956\n0.495057\n-1.25451\n-0.417021\n0.099831\n0.010575\n0.815467\n-0.793362\n-0.602823\n-0.470462\n-1.901034\n-0.749613\n-0.03417\n-0.349764\n-0.109558\n0.50934\n0.937879\n-0.567808\n-0.361403\n0.07038\n0.428986\n0.178268\n-0.264072\n-1.08156\n0.484804\n0.257085\n-0.387199\n-0.594517\n-0.142474\n0.364982\n0.369385\n-0.033974\n…\n0.080806\n0.047688\n0.081428\n-0.072393\n-0.134251\n0.32516\n-0.013819\n-0.231218\n0.235347\n-0.099079\n-0.214146\n-0.088035\n0.279149\n0.235552\n0.056753\n-0.002605\n-0.121467\n-0.011054\n0.014276\n0.031513\n0.056525\n-0.204108\n0.056208\n-0.007412\n0.295334\n0.059559\n-0.072717\n0.143892\n-0.175082\n0.06916\n-0.240234\n-0.243179\n0.132553\n-0.10939\n-0.006807\n-0.081922\n-0.033631\n\n\n-0.128473\n-0.163732\n0.052351\n-3.2502\n0.237454\n0.327462\n2.975345\n1.074392\n-0.642075\n-0.309154\n-1.427569\n0.209862\n-0.207053\n-0.785397\n-1.690689\n0.57705\n1.286289\n-0.260824\n-0.066723\n-0.378312\n-0.107758\n0.58553\n0.723803\n-0.085321\n-0.899026\n-0.508275\n0.946614\n0.681252\n0.591428\n-0.058463\n-0.611216\n-0.249337\n0.151805\n-0.201767\n-0.364704\n-0.279569\n0.032865\n…\n-0.103084\n-0.092279\n0.061387\n-0.229078\n0.214459\n0.018508\n-0.164547\n0.170245\n-0.028671\n-0.024243\n0.116811\n0.03172\n0.010574\n0.014084\n0.15063\n-0.053592\n-0.297773\n-0.033743\n0.264092\n-0.030906\n-0.04306\n-0.126682\n-0.050824\n-0.011592\n0.082704\n-0.186133\n0.172641\n-0.056459\n0.190109\n0.06259\n0.093085\n-0.251115\n0.141207\n0.180379\n-0.006493\n-0.155394\n-0.013597\n\n\n\n\n\n\nFinally, we can convert this to pandas if we want to perform analyses with that tool. Keep in mind that this loads the entire dataframe into memory.\n\n\nCode\ndata_only.to_pandas()\n\n\n\n\n\n\n\n\n\nX_1\nX_2\nX_3\nX_4\nX_5\nX_6\nX_7\nX_8\nX_9\nX_10\n...\nX_250\nX_251\nX_252\nX_253\nX_254\nX_255\nX_256\nX_257\nX_258\nX_259\n\n\n\n\n0\n0.431689\n0.121776\n-0.288611\n1.199042\n-0.758412\n-0.466926\n-0.777705\n-0.081231\n-0.619822\n-1.271280\n...\n-0.103231\n0.166172\n0.268637\n-0.249552\n-0.125842\n-0.010658\n0.148293\n-0.002996\n0.018602\n0.120415\n\n\n1\n-0.286125\n-0.139647\n0.521229\n-0.130772\n-0.392223\n-0.478905\n-2.190718\n-0.910039\n-0.923397\n-0.899920\n...\n0.039593\n-0.251191\n-0.145978\n-0.061276\n0.260967\n0.136172\n0.220407\n-0.016074\n0.245930\n-0.051766\n\n\n2\n0.044537\n0.093762\n0.380710\n-0.078268\n-0.332677\n-0.492756\n-0.542440\n-0.751058\n0.283140\n0.772951\n...\n0.073441\n0.003454\n-0.065908\n0.003793\n0.017154\n0.122071\n0.031753\n-0.115469\n-0.183939\n-0.037042\n\n\n3\n0.045477\n0.020634\n0.312316\n1.316000\n-0.831466\n-1.536956\n0.495057\n-1.254510\n-0.417021\n0.099831\n...\n0.143892\n-0.175082\n0.069160\n-0.240234\n-0.243179\n0.132553\n-0.109390\n-0.006807\n-0.081922\n-0.033631\n\n\n4\n-0.128473\n-0.163732\n0.052351\n-3.250200\n0.237454\n0.327462\n2.975345\n1.074392\n-0.642075\n-0.309154\n...\n-0.056459\n0.190109\n0.062590\n0.093085\n-0.251115\n0.141207\n0.180379\n-0.006493\n-0.155394\n-0.013597\n\n\n\n\n5 rows × 259 columns"
  },
  {
    "objectID": "howto/add_metadata.html",
    "href": "howto/add_metadata.html",
    "title": "Incorporate metadata into profiles",
    "section": "",
    "text": "A very common task when processing morphological profiles is knowing which ones are treatments and which ones are controls. Here we will explore how we can use broad-babel to accomplish this task.\n\n\nCode\nimport polars as pl\nfrom broad_babel.query import get_mapper\nfrom pyarrow.dataset import dataset\nfrom s3fs import S3FileSystem\n\n\nDownloading data from 'https://zenodo.org/records/12211976/files/babel.db' to file '/home/runner/.cache/pooch/2eaa6a2f4915f72d7100683f53982ed8-babel.db'.\n\n\n\n\nCode\n# We will be using the CRISPR dataset specificed in our index csv.\n\n\n\n\nCode\nINDEX_FILE = \"https://raw.githubusercontent.com/jump-cellpainting/datasets/50cd2ab93749ccbdb0919d3adf9277c14b6343dd/manifests/profile_index.csv\"\nCRISPR_URL = pl.read_csv(INDEX_FILE).filter(pl.col(\"subset\")==\"crispr\").item(0,\"url\")\nprofiles = pl.scan_parquet(CRISPR_URL)\nprint(profiles.collect_schema().names()[:6])\n\n\n['Metadata_Source', 'Metadata_Plate', 'Metadata_Well', 'Metadata_JCP2022', 'X_1', 'X_2']\n\n\nFor simplicity the contents of our processed profiles are minimal: “The profile origin” (source, plate and well) and the unique JUMP identifier for that perturbation. We will use broad-babel to further expand on this metadata, but for simplicity’s sake let us sample subset of data.\n\n\nCode\njcp_ids = profiles.select(pl.col(\"Metadata_JCP2022\")).unique().collect().to_series()\nsubsample = jcp_ids.sample(10, seed=42)\nsubsample\n\n\n\nshape: (10,)\n\n\n\nMetadata_JCP2022\n\n\nstr\n\n\n\n\n\"JCP2022_806610\"\n\n\n\"JCP2022_800724\"\n\n\n\"JCP2022_805161\"\n\n\n\"JCP2022_805144\"\n\n\n\"JCP2022_801122\"\n\n\n\"JCP2022_800337\"\n\n\n\"JCP2022_806208\"\n\n\n\"JCP2022_800894\"\n\n\n\"JCP2022_806925\"\n\n\n\"JCP2022_800334\"\n\n\n\n\n\n\nWe will use these JUMP ids to obtain a mapper that indicates the perturbation type (trt, negcon or, rarely, poscon)\n\n\nCode\n# Add a well-known control\npert_mapper = get_mapper((*subsample, \"JCP2022_800002\"), input_column=\"JCP2022\", output_columns=\"JCP2022,pert_type\")\npert_mapper\n\n\n{'JCP2022_800894': 'trt',\n 'JCP2022_805161': 'trt',\n 'JCP2022_800337': 'trt',\n 'JCP2022_806925': 'trt',\n 'JCP2022_805144': 'trt',\n 'JCP2022_800724': 'trt',\n 'JCP2022_806610': 'trt',\n 'JCP2022_800002': 'negcon',\n 'JCP2022_806208': 'trt',\n 'JCP2022_801122': 'trt',\n 'JCP2022_800334': 'trt'}\n\n\nA couple of important notes about broad_babel’s get mapper and other functions: - these must be fed tuples, as these are cached and provide significant speed-ups for repeated calls - ‘get-mapper’ works for datasets for up to a few tens of thousands of samples. If you try to use it to get a mapper for the entirety of the ‘compounds’ dataset it is likely to fail. For these cases we suggest the more general function ‘run_query’. You can read more on this and other use-cases on Babel’s readme.\nWe will now repeat the process to get their ‘standard’ name\n\n\nCode\nname_mapper = get_mapper((*subsample, \"JCP2022_800002\"), input_column=\"JCP2022\", output_columns=\"JCP2022,standard_key\")\nname_mapper\n\n\n{'JCP2022_800724': 'ATP5G3',\n 'JCP2022_806610': 'SLCO5A1',\n 'JCP2022_805161': 'PIK3R2',\n 'JCP2022_800002': 'non-targeting',\n 'JCP2022_806208': 'SCN1B',\n 'JCP2022_800894': 'BMP15',\n 'JCP2022_800337': 'AIPL1',\n 'JCP2022_806925': 'TAF10',\n 'JCP2022_800334': 'AIFM2',\n 'JCP2022_801122': 'CCNO',\n 'JCP2022_805144': 'PIGK'}\n\n\nTo wrap up, we will fetch all the available profiles for these perturbations and use the mappers to add the missing metadata\n\n\nCode\nsubsample_profiles = profiles.filter(pl.col(\"Metadata_JCP2022\").is_in(subsample)).collect()\nprofiles_with_meta = subsample_profiles.with_columns(pl.col(\"Metadata_JCP2022\").replace(pert_mapper).alias(\"pert_type\"),\n                                pl.col(\"Metadata_JCP2022\").replace(name_mapper).alias(\"name\"))\nprofiles_with_meta\n\n\n\nshape: (54, 265)\n\n\n\nMetadata_Source\nMetadata_Plate\nMetadata_Well\nMetadata_JCP2022\nX_1\nX_2\nX_3\nX_4\nX_5\nX_6\nX_7\nX_8\nX_9\nX_10\nX_11\nX_12\nX_13\nX_14\nX_15\nX_16\nX_17\nX_18\nX_19\nX_20\nX_21\nX_22\nX_23\nX_24\nX_25\nX_26\nX_27\nX_28\nX_29\nX_30\nX_31\nX_32\nX_33\n…\nX_225\nX_226\nX_227\nX_228\nX_229\nX_230\nX_231\nX_232\nX_233\nX_234\nX_235\nX_236\nX_237\nX_238\nX_239\nX_240\nX_241\nX_242\nX_243\nX_244\nX_245\nX_246\nX_247\nX_248\nX_249\nX_250\nX_251\nX_252\nX_253\nX_254\nX_255\nX_256\nX_257\nX_258\nX_259\npert_type\nname\n\n\nstr\nstr\nstr\nstr\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\n…\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nstr\nstr\n\n\n\n\n\"source_13\"\n\"CP-CC9-R1-11\"\n\"B04\"\n\"JCP2022_800724\"\n-0.179203\n0.045579\n-0.720051\n-0.947775\n-0.494884\n1.017451\n-0.550816\n-0.2569\n-0.224837\n-0.723088\n-0.051339\n0.048555\n-0.265932\n-0.459218\n0.756093\n-0.564739\n0.174954\n-0.669131\n0.152016\n0.282875\n-0.135288\n0.803195\n-0.23742\n-0.554881\n-0.022447\n0.462749\n0.550902\n0.239973\n-0.721681\n0.206234\n-0.499473\n-0.292336\n0.275288\n…\n-0.049149\n-0.018467\n-0.011238\n0.058182\n-0.173994\n0.176705\n0.149054\n-0.023245\n0.256588\n-0.224239\n-0.25722\n-0.068039\n-0.055538\n0.099046\n-0.206754\n-0.113038\n0.058506\n0.035786\n0.056747\n-0.121439\n-0.04322\n-0.041146\n0.061362\n0.081678\n-0.029331\n0.042756\n-0.037866\n-0.040689\n-0.052682\n-0.029034\n-0.055071\n-0.015037\n0.128229\n-0.107707\n0.12162\n\"trt\"\n\"ATP5G3\"\n\n\n\"source_13\"\n\"CP-CC9-R2-11\"\n\"B04\"\n\"JCP2022_800724\"\n-0.336693\n-0.04968\n-0.451217\n0.020552\n-0.550231\n-0.08228\n-0.659972\n-0.103344\n-0.433783\n-1.011043\n-0.494276\n-0.098099\n-0.576943\n-0.189821\n0.642703\n-0.465009\n-1.443218\n0.135838\n-0.475816\n-0.145467\n0.834293\n-1.159477\n0.259745\n0.113523\n-0.673272\n-0.389256\n-0.195229\n-0.298032\n-0.826003\n0.268\n-0.820343\n0.1356\n0.631715\n…\n0.08262\n-0.130876\n-0.191696\n0.047493\n-0.120482\n-0.069689\n0.185021\n0.123883\n-0.048624\n0.217051\n-0.051697\n-0.110396\n-0.32327\n-0.026548\n0.028846\n0.159027\n0.049329\n-0.022952\n-0.109511\n-0.08116\n-0.187702\n-0.167637\n0.009849\n0.008477\n-0.103171\n0.019686\n0.021533\n0.110453\n-0.155572\n0.061642\n-0.122678\n-0.130547\n-0.070244\n0.103351\n0.129319\n\"trt\"\n\"ATP5G3\"\n\n\n\"source_13\"\n\"CP-CC9-R3-11\"\n\"B04\"\n\"JCP2022_800724\"\n-0.071778\n0.032754\n-0.799099\n-0.116439\n0.316009\n-0.187299\n-0.52323\n-0.436114\n-0.084609\n0.132464\n-0.610135\n-0.060495\n0.478056\n-1.025802\n-0.703269\n0.39913\n0.725471\n0.033697\n-0.194748\n-0.18912\n0.309082\n-1.549311\n0.089102\n-0.175664\n-0.919624\n-0.017722\n0.454529\n0.283862\n1.008337\n-0.635397\n-0.065453\n-0.621406\n0.353161\n…\n0.052835\n0.175016\n-0.275607\n0.163141\n-0.018767\n0.059232\n-0.005441\n0.078928\n0.093407\n-0.038617\n-0.089471\n-0.053281\n-0.155592\n-0.10147\n0.16118\n-0.14273\n0.00892\n0.011721\n0.222285\n0.268519\n0.122138\n0.068672\n0.016851\n-0.032147\n0.028349\n0.03372\n-0.014877\n-0.019542\n0.173525\n-0.095088\n0.115678\n0.161187\n-0.047456\n-0.115659\n0.059942\n\"trt\"\n\"ATP5G3\"\n\n\n\"source_13\"\n\"CP-CC9-R4-11\"\n\"B04\"\n\"JCP2022_800724\"\n-0.496795\n0.119024\n0.091194\n-0.277266\n-0.395829\n-0.28006\n-0.187963\n0.144501\n-0.373719\n0.438808\n0.103095\n-0.12754\n0.101875\n0.11948\n-0.066272\n-0.204795\n-0.353165\n0.064539\n0.002036\n0.003916\n-0.041061\n-0.570462\n-0.034363\n-0.230325\n-0.865101\n-0.293025\n-0.297365\n0.139203\n-0.259161\n0.289269\n0.147489\n-0.239925\n-0.377658\n…\n-0.040113\n0.023246\n0.028122\n0.118498\n-0.062652\n0.205498\n0.104422\n-0.000787\n0.035718\n0.038951\n0.02616\n-0.162547\n-0.03114\n-0.156934\n-0.055203\n0.078284\n-0.108082\n-0.06201\n-0.059843\n0.179604\n0.142085\n0.028106\n0.066576\n-0.009711\n0.025331\n0.074612\n-0.060014\n0.019819\n0.120812\n0.029707\n-0.048421\n0.002147\n-0.008392\n-0.043671\n0.061953\n\"trt\"\n\"ATP5G3\"\n\n\n\"source_13\"\n\"CP-CC9-R5-11\"\n\"B04\"\n\"JCP2022_800724\"\n-0.04813\n-0.004168\n-1.47494\n-1.34862\n-0.258693\n-0.040721\n-0.898532\n-0.244125\n-1.261767\n-0.479193\n0.440885\n0.189645\n0.773688\n0.214766\n-0.539586\n0.063527\n0.357664\n0.537456\n0.135883\n-0.32437\n-0.784124\n-0.142953\n0.15761\n-0.189173\n-1.097973\n-0.579061\n-0.205285\n0.289609\n0.042369\n0.381059\n0.086015\n0.251602\n-0.149517\n…\n0.379001\n-0.045873\n-0.080648\n-0.049307\n0.064203\n0.19734\n-0.106436\n-0.149661\n0.082356\n0.062972\n0.029292\n0.166557\n-0.037549\n-0.107835\n-0.096465\n0.091998\n-0.055239\n0.291369\n-0.0434\n0.024657\n-0.083177\n-0.040337\n0.065398\n-0.223745\n-0.146508\n-0.075981\n0.211772\n0.118272\n-0.019923\n0.115248\n0.13487\n0.094743\n0.268908\n0.121957\n-0.009202\n\"trt\"\n\"ATP5G3\"\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n\"source_13\"\n\"CP-CC9-R7-02\"\n\"B03\"\n\"JCP2022_801122\"\n0.018146\n-0.072163\n-1.628169\n1.168305\n-0.901758\n-0.663834\n-0.12509\n0.191807\n-1.010687\n-0.300892\n-0.163488\n-0.002663\n0.173593\n-1.181303\n-0.621355\n0.461811\n1.125369\n-0.640311\n-0.10993\n0.980116\n0.007434\n0.190914\n-1.278744\n-0.004727\n0.839731\n-0.09384\n0.390618\n0.672311\n-0.115593\n0.006413\n0.27084\n0.186882\n-0.150672\n…\n-0.44151\n0.096647\n0.023935\n-0.024729\n-0.26936\n0.095914\n0.442\n-0.06849\n0.386715\n0.068284\n-0.303369\n-0.159002\n0.206009\n0.135437\n0.208621\n-0.266892\n-0.116202\n0.152833\n0.119515\n-0.387522\n0.295818\n-0.018867\n-0.006838\n-0.083365\n0.293161\n-0.13925\n-0.034473\n-0.068956\n-0.109427\n0.17968\n0.045678\n0.013564\n0.199346\n-0.346779\n-0.265369\n\"trt\"\n\"CCNO\"\n\n\n\"source_13\"\n\"CP-CC9-R7-02\"\n\"G05\"\n\"JCP2022_800334\"\n-0.096488\n-0.13633\n-0.415013\n-0.666479\n-0.345511\n0.940488\n0.525846\n-0.062083\n-0.668985\n-0.734833\n-0.461015\n-0.248431\n0.026935\n-0.261904\n0.475942\n0.34353\n0.154829\n0.049349\n-0.410979\n0.714908\n-0.237337\n-0.218917\n-0.115895\n1.095113\n0.573263\n-0.089777\n-0.046059\n0.492834\n0.787823\n0.103654\n-0.286321\n0.128422\n0.460617\n…\n0.2998\n-0.00172\n0.126235\n0.115806\n0.267105\n0.087106\n-0.069627\n-0.181541\n0.406851\n0.040249\n-0.103718\n-0.17748\n0.251416\n0.033296\n-0.002368\n-0.107811\n0.112058\n0.01115\n-0.164082\n-0.046583\n0.044019\n0.097505\n0.168148\n-0.262169\n0.105299\n0.058794\n-0.020203\n0.029596\n0.030017\n-0.010082\n-0.0819\n0.124795\n0.136557\n-0.088307\n-0.027889\n\"trt\"\n\"AIFM2\"\n\n\n\"source_13\"\n\"CP-CC9-R7-19\"\n\"N15\"\n\"JCP2022_805144\"\n-0.04861\n0.01162\n-0.349713\n0.465265\n-0.41084\n0.809143\n-0.815177\n0.744982\n-0.637436\n-0.217588\n-0.580487\n-0.416038\n-0.461974\n0.353491\n-1.06579\n1.189594\n0.25142\n0.385683\n0.344021\n-0.410558\n0.136062\n0.393418\n0.693911\n0.214378\n-1.645038\n0.708788\n0.106744\n0.119793\n-0.544012\n0.295838\n0.474901\n-0.913168\n-0.610905\n…\n0.148206\n-0.167349\n-0.045978\n0.030872\n0.096305\n0.006685\n0.114877\n-0.22564\n0.104589\n-0.093435\n-0.024681\n-0.055723\n0.327195\n0.191604\n-0.236054\n0.068024\n-0.232993\n-0.079452\n0.108273\n0.051177\n-0.008836\n-0.10957\n-0.004287\n0.144594\n0.041261\n0.038536\n0.065399\n0.109214\n0.117318\n0.055545\n-0.135446\n-0.091261\n0.379441\n0.124905\n-0.325864\n\"trt\"\n\"PIGK\"\n\n\n\"source_13\"\n\"CP-CC9-R8-02\"\n\"B03\"\n\"JCP2022_801122\"\n0.077984\n-0.051447\n-0.811837\n1.598149\n-1.18124\n-0.134066\n0.40364\n0.382842\n-1.013849\n-0.516332\n0.222729\n-0.014398\n0.481705\n-1.04265\n0.006009\n0.251332\n0.704104\n-0.530324\n0.086713\n1.214054\n-0.431842\n0.151406\n-1.194995\n-1.029775\n0.308573\n0.022335\n0.328378\n0.182613\n-0.074726\n0.32392\n0.07431\n-0.126602\n0.355502\n…\n-0.215454\n0.128136\n-0.183127\n0.298585\n0.104197\n0.115631\n0.16682\n-0.098503\n0.347995\n0.131217\n-0.138687\n0.09553\n-0.008261\n-0.075999\n0.165603\n-0.056954\n-0.288788\n0.156431\n0.116339\n-0.183824\n0.081589\n-0.095222\n-0.094066\n-0.010998\n0.120449\n-0.206126\n-0.388319\n-0.033806\n-0.116839\n0.10074\n0.060802\n0.04313\n0.032594\n-0.143874\n0.061002\n\"trt\"\n\"CCNO\"\n\n\n\"source_13\"\n\"CP-CC9-R8-02\"\n\"G05\"\n\"JCP2022_800334\"\n-0.01214\n-0.018834\n0.062114\n-0.376152\n-0.129651\n-0.092242\n0.583544\n-0.458018\n0.182538\n-0.327214\n-0.534778\n-0.752845\n-0.249326\n-0.525554\n0.816308\n1.486544\n0.445705\n-0.40521\n0.341104\n0.722489\n-0.140623\n-0.353613\n0.150293\n0.511174\n-0.882043\n-0.162688\n0.09686\n0.649917\n0.070691\n0.137159\n0.139808\n0.872839\n-0.033679\n…\n0.268503\n-0.09308\n0.019721\n0.120839\n-0.190425\n0.038317\n-0.030606\n-0.047169\n-0.074581\n0.002541\n0.0167\n0.011476\n0.111319\n0.023178\n0.347921\n0.059315\n0.177679\n-0.089641\n-0.118523\n-0.03169\n0.121687\n-0.03853\n0.178618\n-0.305631\n-0.10398\n0.261608\n-0.085974\n-0.086401\n-0.105807\n0.158312\n-0.029877\n0.036779\n-0.047671\n0.199366\n-0.064928\n\"trt\"\n\"AIFM2\""
  },
  {
    "objectID": "explanations/Resources.html",
    "href": "explanations/Resources.html",
    "title": "Available resources",
    "section": "",
    "text": "Available resources\n\n\n\nAvailable resources\n\nHome website: Access news and related publications.\nWe provide Open Source Web “JUMPer” interfaces for all three datasets (CRISPR, ORF and Compound). For more details follow this link.\nArdigen provides a website to explore a representation (requires creating a free account).\nSpring Science also provides a website for data exploration (account needed)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "Overview\nThis is work in progress. The purpose of this resource is to concentrate all the useful and up-to-date information necessary to make use of JUMP. It aims to summarise the most useful information, including examples, guides, know-hows and links to more material for deeper dives into data acquisition, processing, sharing and visualisation.\n\n\nI just want to access the web tools\nHere you can find the up-to-date web tools to explore JUMP from your browser.\n\n\nI am a developer interested in using and writing programatic tools for JUMP\nOur monorepo hosts Python libraries that may help you access JUMP data in a high-throughput manner.\n\n\nWhy yet another resource?\nIts secondary (yet highly important purpose) is to minimise friction for developers, technical writers and biologists to produce and access novel insights and tools. We believe complexity is one of the biggest challenges in challenge, hampering collaboration and novel biological insights. We aim to make this the one-stop shop for the vast majority of JUMP questions, be it computational or biological."
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "Additional uses",
    "section": "",
    "text": "Additional uses\n\nFocal point for JUMP information and data analysis pipelines.\n\n\nAdditional uses\nThis repository can be used as a way to install essential dependencies for an exploratory analysis of JUMP morphological data."
  },
  {
    "objectID": "explanations/FAQ.html",
    "href": "explanations/FAQ.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "Frequently Asked Questions\n\nAnalyses\n\nHow can I reproduce an environment to explore JUMP data?\n\nData\n\nDoes JUMP contain X compound/gene?\nWhere are the datasets specification?\nWhy are some images with corresponding images but no downstream analysis?\nWhy do some perturbations have so many replicates\nHow were the profiles created?\nDo we we expect one JCP to have multiple targets?\nDo JCPs within either the CRISPR or ORF share the same gene?\nWeb interfaces\nFrequently Asked Questions and links to their answers. They are grouped based on whether they pertain to data, libraries or analyses."
  },
  {
    "objectID": "explanations/FAQ.html#analyses",
    "href": "explanations/FAQ.html#analyses",
    "title": "Frequently Asked Questions",
    "section": "Analyses",
    "text": "Analyses\n\n\nHow can I reproduce an environment to explore JUMP data?\n(WIP) The easiest way to set things up will be installing from pip in your enviromnment of choice:\npip install jump-pills"
  },
  {
    "objectID": "explanations/FAQ.html#data",
    "href": "explanations/FAQ.html#data",
    "title": "Frequently Asked Questions",
    "section": "Data",
    "text": "Data\n\n\nDoes JUMP contain X compound/gene?\nThe easiest way to find out is querying your dataset using this web tool. Alternatively, you can explore the metadata tables on the datasets repository.\n\n\n\nWhere are the datasets specification?\nThe main resource to understand the technicalities of the JUMP datasets collection and assembly is on this repo.\n\n\n\nWhy are some images with corresponding images but no downstream analysis?\nSome plates failed Quality Control (QC) but we kept them because they may be useful for developing QC methods.\n\n\n\nWhy do some perturbations have so many replicates\nMost plates contain 16 negative control wells, while some have as many as 28 wells. One replicate of four of the compound positive controls are added to wells O23, O24, P23 and P24. The remaining wells contain ORF treatments, with a single replicate of each per plate map and with five replicate plates produced per plate map (issue).\n\n\n\nHow were the profiles created?\nWe used snakemake and pycytominer to generate these. The details can be found in this repo.\n\n\n\nDo we we expect one JCP to have multiple targets?\nYes, there will be many with multiple targets. For instance, JCP2022_050797 (quinidine/quinine) has the targets KCNK1 and KCNN4.\nTwo were considered to be two different compounds because they had different names and broad_sample names. But after all the data cleanup steps, they ended up being the same. Hence two different entries.\n\n\n\nDo JCPs within either the CRISPR or ORF share the same gene?\nIn CRISPR each JCP ID corresponds to a different gene. But in ORF there are sometimes multiple reagents targeting the same gene. In this case, we compute consensus profiles at the gene level (more info here).\n\n\n\nWeb interfaces\n\nWhat is the source of the replicability metric?\nThese two files (ORF and CRISPR) contain the mAP and corrected p values for replicate retrieval. They won’t contain all ORF and CRISPR reagents because so of them were filtered out for qc reasons.\nX_Feature: For each row, is the Feature value an average for all the cells in the Metadata_image using the listed Mask? Or is it associated with a single cell in that image?\nAny Feature is the average of all cells and all replicates (typically four in total) for the specific mask and feature.\nHow are Statistic and Median calculated for each row? Are they calculated in relation to the average of the “Feature” values for the negative controls in the same plate?\n\nStatistic is the probability of a given distribution (four replicates) to occur relative to their negative controls (in the four plates, typically each replicate is in an independent plate).\nMedian is the median feature across all (~4) replicates. Each of these replicates’ value was in turn the mean of all the sites and cells in a given well."
  },
  {
    "objectID": "howto/display_perturbation_images.html",
    "href": "howto/display_perturbation_images.html",
    "title": "Plot all channels for one site",
    "section": "",
    "text": "This notebook demonstrates how to retrieve and plot all channels for one site using jump_portrait.\n\n\nCode\nimport matplotlib.colors as mpl  # noqa: CPY001\nimport numpy as np\nimport polars as pl\nfrom jump_portrait.fetch import get_item_location_info, get_jump_image\nfrom matplotlib import pyplot as plt\n\n\nFirst, we need to get location information telling us where all images corresponding to a specific perturbation can be found. We will use the “get_item_location” function from jump_portrait for this.\nHere we retrieve image locations for the “RAB30” gene:\n\n\nCode\ngene_info = get_item_location_info(\"RAB30\")\ngene_info.shape\n\n\nDownloading data from 'https://github.com/jump-cellpainting/datasets/raw/c68deb2babc83747e6b14d8a77e5655138a6086a/metadata/well.csv.gz' to file '/home/runner/.cache/pooch/4efbf4dd3dd9aaecc8ccb9fc3c6b4122-well.csv.gz'.\nDownloading data from 'https://github.com/jump-cellpainting/datasets/raw/c68deb2babc83747e6b14d8a77e5655138a6086a/metadata/plate.csv.gz' to file '/home/runner/.cache/pooch/a530bb82de29e39332bdef6f29397769-plate.csv.gz'.\n\n\n(90, 28)\n\n\nThere are 90 images: 9 sites/well X 5 replicate wells X 2 data types (CRISPR & ORF).\nWe can also retrieve locations for compound data. By default, the function assumes a query by INCHI key. We can also query by JCP ID by specifying the query column:\n\n\nCode\ncmpd_info_byinchi = get_item_location_info(\"CLETVKMYAXARPO-UHFFFAOYSA-N\")\ncmpd_info_byjcp = get_item_location_info(\"JCP2022_011844\", input_column=\"JCP2022\")\n\nprint(cmpd_info_byinchi.shape)\nprint(cmpd_info_byjcp.shape)\n\n\n(34, 28)\n(34, 28)\n\n\nThere are 34 sites corresponding to this compound.\nWe’ve written a function to display all channels for a specific image. Note that this is just one possible way to display images - we’ve included the function here so that you can modify it to suit your own needs.\n\n\nCode\ndef display_site(source: str, batch: str, plate: str, well: str, site: str, label: str, int_percentile: float) -&gt; None:\n    \"\"\"Plot all channels from one image.\n\n    Parameters\n    ----------\n    source : String\n        Source ID for image of interest.\n    batch : String\n        Batch ID for image of interest.\n    plate : String\n        Plate ID for image of interest.\n    well : String\n        Well ID for image of interest.\n    site : String\n        Site ID for image of interest.\n    label : String\n        Label to display in lower left corner.\n    int_percentile: float\n        Rescale the image from 0 - this percentile of intensity values.\n\n    \"\"\"\n    channels = [\"DNA\", \"ER\", \"Mito\", \"AGP\", \"RNA\"]\n\n    n_rows = 2\n    n_cols = 3\n\n    # Make images\n    axes = plt.subplots(n_rows, n_cols, figsize=(2.6 * n_cols, 2.6 * n_rows))[1]\n    axes = axes.ravel()\n    counter = 0\n\n    for channel in channels:\n        if channel == \"ER\":\n            cmap = mpl.LinearSegmentedColormap.from_list(\"green_cmap\", [\"#000\", \"#65fe08\"])\n        elif channel == \"DNA\":\n            cmap = mpl.LinearSegmentedColormap.from_list(\"green_cmap\", [\"#000\", \"#0000FF\"])\n        elif channel == \"Mito\":\n            cmap = mpl.LinearSegmentedColormap.from_list(\"green_cmap\", [\"#000\", \"#FF0000\"])\n        elif channel == \"AGP\":\n            cmap = mpl.LinearSegmentedColormap.from_list(\"green_cmap\", [\"#000\", \"#FFFF00\"])\n        elif channel == \"RNA\":\n            cmap = mpl.LinearSegmentedColormap.from_list(\"green_cmap\", [\"#000\", \"#FFA500\"])\n        else:\n            cmap = \"gray\"\n\n        img = get_jump_image(source, batch, plate, well, channel, site, None)\n\n        ax = axes[counter]\n        ax.imshow(img, vmin=0, vmax=np.percentile(img, int_percentile), cmap=cmap)\n        ax.axis(\"off\")\n\n        # Add channel name label in the top left corner\n        ax.text(\n            0.05, 0.95, channel,\n            horizontalalignment='left',\n            verticalalignment='top',\n            fontsize=18,\n            color='black',\n            bbox=dict(facecolor='white', alpha=0.8, edgecolor='none', boxstyle='round,pad=0.3'),\n            transform=ax.transAxes\n        )\n        \n        counter += 1\n\n    # put label in last subplot\n    ax = axes[counter]\n    ax.text(\n        0.5,\n        0.5,\n        label,\n        horizontalalignment=\"center\",\n        verticalalignment=\"center\",\n        fontsize=20,\n        color=\"black\",\n        transform=ax.transAxes,\n    )\n    ax.axis(\"off\")\n\n    # show plot\n    plt.tight_layout()\n    plt.show()\n\n\nWe can get the required location parameters from the location info that we retrieved earlier. Here we get parameters for the first site in the JCP compound results:\n\n\nCode\nsource, batch, plate, well, site, *rest = cmpd_info_byjcp.row(0)\n\n\nNext, we define the label and make the plot:\n\n\nCode\nlabel = f\"JCP2022_011844\\n\\nplate: {plate}\\nwell: {well}\\nsite: {site}\"\ndisplay_site(source, batch, plate, well, site, label, 99.5)\n\n\n\n\n\nHere, we plot one of the RAB30 ORF images:\n\n\nCode\nsource, batch, plate, well, site, *rest = gene_info.filter(pl.col(\"Metadata_PlateType\") == \"ORF\").row(0)\nlabel = f\"RAB30 (ORF)\\n\\nplate: {plate}\\nwell: {well}\\nsite: {site}\"\ndisplay_site(source, batch, plate, well, site, label, 99.5)\n\n\n\n\n\nAnd for CRISPR:\n\n\nCode\nsource, batch, plate, well, site, *rest = gene_info.filter(pl.col(\"Metadata_PlateType\") == \"CRISPR\").row(0)\nlabel = f\"RAB30 (CRISPR)\\n\\nplate: {plate}\\nwell: {well}\\nsite: {site}\"\ndisplay_site(source, batch, plate, well, site, label, 99.5)"
  }
]