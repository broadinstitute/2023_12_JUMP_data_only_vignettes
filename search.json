[
  {
    "objectID": "howto/tutorial_basic.html",
    "href": "howto/tutorial_basic.html",
    "title": "Basic JUMP data access",
    "section": "",
    "text": "This is a tutorial on how to access profiles from the JUMP Cell Painting datasets. We will use polars to fetch the data frames lazily, with the help of s3fs and pyarrow. We prefer lazy loading because the data can be too big to be handled in memory.\n\n\nCode\nimport polars as pl\nfrom pyarrow.dataset import dataset\nfrom s3fs import S3FileSystem\n\n\nThe shapes of the available datasets are:\n\ncpg0016-jump[crispr]: CRISPR knockouts genetic perturbations.\ncpg0016-jump[orf]: Overexpression genetic perturbations.\ncpg0016-jump[compound]: Chemical perturbations.\n\nTheir explicit location is determined by the transformations that produce the datasets. The aws paths of the dataframes are built from a prefix below:\n\n\nCode\n_PREFIX = (\n    \"s3://cellpainting-gallery/cpg0016-jump-assembled/source_all/workspace/profiles\"\n)\n_RECIPE = \"jump-profiling-recipe_2024_a917fa7\"\n\ntransforms = (\n    (\n        \"CRISPR\",\n        \"profiles_wellpos_cc_var_mad_outlier_featselect_sphering_harmony_PCA_corrected\",\n    ),\n    (\"ORF\", \"profiles_wellpos_cc_var_mad_outlier_featselect_sphering_harmony\"),\n    (\"COMPOUND\", \"profiles_var_mad_int_featselect_harmony\"),\n)\n\nfilepaths = {\n    dset: f\"{_PREFIX}/{_RECIPE}/{dset}/{transform}/profiles.parquet\"\n    for dset, transform in transforms\n}\n\n\nWe use a S3FileSystem to avoid the need of credentials.\n\n\nCode\ndef lazy_load(path: str) -&gt; pl.LazyFrame:\n    fs = S3FileSystem(anon=True)\n    myds = dataset(path, filesystem=fs)\n    df = pl.scan_pyarrow_dataset(myds)\n    return df\n\n\nWe will lazy-load the dataframes and print the number of rows and columns\n\n\nCode\ninfo = {k: [] for k in (\"dataset\", \"#rows\", \"#cols\", \"#Metadata cols\", \"Size (MB)\")}\nfor name, path in filepaths.items():\n    data = lazy_load(path)\n    n_rows = data.select(pl.count()).collect().item()\n    metadata_cols = data.select(pl.col(\"^Metadata.*$\")).columns\n    n_cols = data.width\n    n_meta_cols = len(metadata_cols)\n    estimated_size = int(round(4.03 * n_rows * n_cols / 1e6, 0))  # B -&gt; MB\n    for k, v in zip(info.keys(), (name, n_rows, n_cols, n_meta_cols, estimated_size)):\n        info[k].append(v)\n\npl.DataFrame(info)\n\n\n\n\nshape: (3, 5)\n\n\n\ndataset\n#rows\n#cols\n#Metadata cols\nSize (MB)\n\n\nstr\ni64\ni64\ni64\ni64\n\n\n\n\n\"CRISPR\"\n51185\n3677\n4\n758\n\n\n\"ORF\"\n81663\n3677\n4\n1210\n\n\n\"COMPOUND\"\n804844\n3677\n4\n11926\n\n\n\n\n\n\n\nLet us now focus on the crispr dataset and use a regex to select the metadata columns. We will then sample rows and display the overview. Note that the collect() method enforces loading some data into memory.\n\n\nCode\ndata = lazy_load(filepaths[\"CRISPR\"])\ndata.select(pl.col(\"^Metadata.*$\").sample(n=5, seed=1)).collect()\n\n\n\n\nshape: (5, 4)\n\n\n\nMetadata_Source\nMetadata_Plate\nMetadata_Well\nMetadata_JCP2022\n\n\nstr\nstr\nstr\nstr\n\n\n\n\n\"source_13\"\n\"CP-CC9-R1-06\"\n\"M07\"\n\"JCP2022_806374…\n\n\n\"source_13\"\n\"CP-CC9-R1-28\"\n\"B03\"\n\"JCP2022_800001…\n\n\n\"source_13\"\n\"CP-CC9-R2-23\"\n\"P20\"\n\"JCP2022_802185…\n\n\n\"source_13\"\n\"CP-CC9-R3-15\"\n\"J15\"\n\"JCP2022_800322…\n\n\n\"source_13\"\n\"CP-CC9-R6-28\"\n\"O23\"\n\"JCP2022_800002…\n\n\n\n\n\n\n\nThe following line excludes the metadata columns:\n\n\nCode\ndata_only = data.select(pl.all().exclude(\"^Metadata.*$\").sample(n=5, seed=1)).collect()\ndata_only\n\n\n\n\nshape: (5, 3_673)\n\n\n\nCells_AreaShape_Area\nCells_AreaShape_BoundingBoxArea\nCells_AreaShape_BoundingBoxMaximum_X\nCells_AreaShape_BoundingBoxMaximum_Y\nCells_AreaShape_BoundingBoxMinimum_X\nCells_AreaShape_BoundingBoxMinimum_Y\nCells_AreaShape_Center_X\nCells_AreaShape_Center_Y\nCells_AreaShape_Compactness\nCells_AreaShape_Eccentricity\nCells_AreaShape_EquivalentDiameter\nCells_AreaShape_EulerNumber\nCells_AreaShape_Extent\nCells_AreaShape_FormFactor\nCells_AreaShape_MajorAxisLength\nCells_AreaShape_MaxFeretDiameter\nCells_AreaShape_MaximumRadius\nCells_AreaShape_MeanRadius\nCells_AreaShape_MedianRadius\nCells_AreaShape_MinFeretDiameter\nCells_AreaShape_MinorAxisLength\nCells_AreaShape_Orientation\nCells_AreaShape_Perimeter\nCells_AreaShape_Solidity\nCells_AreaShape_Zernike_0_0\nCells_AreaShape_Zernike_1_1\nCells_AreaShape_Zernike_2_0\nCells_AreaShape_Zernike_2_2\nCells_AreaShape_Zernike_3_1\nCells_AreaShape_Zernike_3_3\nCells_AreaShape_Zernike_4_0\nCells_AreaShape_Zernike_4_2\nCells_AreaShape_Zernike_4_4\nCells_AreaShape_Zernike_5_1\nCells_AreaShape_Zernike_5_3\nCells_AreaShape_Zernike_5_5\nCells_AreaShape_Zernike_6_0\n…\nNuclei_Texture_Variance_DNA_5_03_256\nNuclei_Texture_Variance_ER_10_00_256\nNuclei_Texture_Variance_ER_10_01_256\nNuclei_Texture_Variance_ER_10_02_256\nNuclei_Texture_Variance_ER_10_03_256\nNuclei_Texture_Variance_ER_3_00_256\nNuclei_Texture_Variance_ER_3_01_256\nNuclei_Texture_Variance_ER_3_02_256\nNuclei_Texture_Variance_ER_3_03_256\nNuclei_Texture_Variance_ER_5_00_256\nNuclei_Texture_Variance_ER_5_01_256\nNuclei_Texture_Variance_ER_5_02_256\nNuclei_Texture_Variance_ER_5_03_256\nNuclei_Texture_Variance_Mito_10_00_256\nNuclei_Texture_Variance_Mito_10_01_256\nNuclei_Texture_Variance_Mito_10_02_256\nNuclei_Texture_Variance_Mito_10_03_256\nNuclei_Texture_Variance_Mito_3_00_256\nNuclei_Texture_Variance_Mito_3_01_256\nNuclei_Texture_Variance_Mito_3_02_256\nNuclei_Texture_Variance_Mito_3_03_256\nNuclei_Texture_Variance_Mito_5_00_256\nNuclei_Texture_Variance_Mito_5_01_256\nNuclei_Texture_Variance_Mito_5_02_256\nNuclei_Texture_Variance_Mito_5_03_256\nNuclei_Texture_Variance_RNA_10_00_256\nNuclei_Texture_Variance_RNA_10_01_256\nNuclei_Texture_Variance_RNA_10_02_256\nNuclei_Texture_Variance_RNA_10_03_256\nNuclei_Texture_Variance_RNA_3_00_256\nNuclei_Texture_Variance_RNA_3_01_256\nNuclei_Texture_Variance_RNA_3_02_256\nNuclei_Texture_Variance_RNA_3_03_256\nNuclei_Texture_Variance_RNA_5_00_256\nNuclei_Texture_Variance_RNA_5_01_256\nNuclei_Texture_Variance_RNA_5_02_256\nNuclei_Texture_Variance_RNA_5_03_256\n\n\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\n…\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\nf32\n\n\n\n\n3437.205322\n6777.026367\n655.655762\n553.805725\n574.797363\n475.20105\n614.663025\n513.953979\n2.809995\n0.766263\n63.48436\n0.934583\n0.5282\n0.393083\n90.885178\n96.299362\n21.411591\n7.525086\n6.554964\n57.310593\n52.115498\n0.739814\n330.359772\n0.785753\n0.455676\n0.056063\n0.157158\n0.05564\n0.033548\n0.019762\n0.021171\n0.03315\n0.021444\n0.015374\n0.016197\n0.010043\n0.010896\n…\n0.287671\n2.316995\n2.255697\n2.31177\n2.281517\n2.137642\n2.17198\n2.135844\n2.171006\n2.198508\n2.268348\n2.196704\n2.264076\n8.106384\n8.647932\n8.149483\n8.731106\n8.056567\n7.904062\n8.053588\n7.903239\n7.893166\n7.876201\n7.89196\n7.928691\n5.882857\n5.725977\n5.863044\n5.74948\n5.372434\n5.473141\n5.380401\n5.467793\n5.536143\n5.733851\n5.548314\n5.717349\n\n\n2723.384521\n5158.307617\n677.795349\n557.942017\n606.970093\n488.857605\n641.975159\n522.861877\n2.561128\n0.741647\n56.989681\n0.950307\n0.548386\nnull\n78.137085\n83.441475\n19.805571\n6.985418\n6.062629\n51.839073\n47.675426\n-2.123358\n286.608917\n0.801257\n0.485367\n0.056452\n0.164563\n0.055538\n0.031914\n0.020555\n0.020632\n0.031065\n0.021271\n0.014857\n0.015759\n0.010461\n0.01096\n…\n0.425449\n3.520926\n3.387909\n3.527264\n3.404135\n3.201259\n3.272938\n3.202795\n3.268549\n3.315624\n3.447717\n3.323368\n3.439064\n7.47143\n8.032343\n7.453537\n8.07777\n7.264492\n7.104119\n7.227602\n7.152196\n7.132525\n7.170595\n7.114265\n7.223675\n10.33992\n9.888246\n10.363727\n9.988524\n9.360723\n9.590192\n9.381898\n9.56544\n9.692972\n10.118198\n9.752176\n10.0841\n\n\n3654.835693\n7013.448242\n631.593323\n550.501038\n550.170898\n470.806641\n590.420654\n510.163788\n2.775027\n0.761809\n64.935699\n0.922245\n0.536226\nnull\n90.942703\n97.066788\n22.177958\n7.783074\n6.760633\n58.599976\n53.501411\n-0.699903\n337.737854\n0.793812\n0.466231\n0.055939\n0.160713\n0.055947\n0.032861\n0.019502\n0.021562\n0.033062\n0.021108\n0.014772\n0.015794\n0.009829\n0.010827\n…\n0.233601\n1.046697\n1.018803\n1.049524\n1.028847\n0.985821\n1.001579\n0.988126\n0.999641\n1.007238\n1.031999\n1.011429\n1.031196\n7.501048\n8.037206\n7.473342\n7.99159\n9.592624\n9.640192\n9.525067\n9.178057\n9.411607\n9.306776\n9.303323\n9.292846\n3.829718\n3.703847\n3.848579\n3.7504\n3.545621\n3.615607\n3.552575\n3.612055\n3.651154\n3.754131\n3.665798\n3.757694\n\n\n3173.76416\n6010.796875\n671.297913\n581.970459\n594.554871\n508.082428\n632.437805\n544.703125\n2.488786\n0.750593\n61.232468\n0.92419\n0.546198\nnull\n84.904556\n90.029091\n21.05418\n7.430189\n6.480733\n55.409756\n51.01392\n1.157861\n304.193604\n0.803121\n0.480031\n0.056833\n0.161786\n0.056623\n0.032846\n0.02063\n0.020398\n0.031956\n0.021722\n0.014996\n0.016372\n0.010458\n0.011155\n…\n0.272457\n2.945141\n2.821762\n2.947247\n2.814691\n2.711728\n2.773225\n2.715023\n2.772156\n2.807252\n2.891628\n2.810266\n2.891836\n11.273093\n12.210885\n11.366681\n11.915511\n12.807759\n12.333618\n12.660041\n12.259472\n11.12972\n11.053115\n11.020443\n11.067571\n13.501965\n12.914554\n13.534065\n12.93867\n12.413904\n12.706355\n12.442088\n12.701751\n12.854201\n13.250565\n12.877565\n13.260153\n\n\n2861.939453\n5583.744629\n649.689819\n555.609497\n577.530701\n483.638062\n612.984192\n519.09375\n2.492543\n0.756743\n57.922684\n0.927374\n0.539043\nnull\n81.930603\n86.510559\n19.579346\n6.928279\n6.051001\n52.5947\n48.145298\n2.168251\n288.56369\n0.794415\n0.47224\n0.056577\n0.157565\n0.057176\n0.033039\n0.0208\n0.020877\n0.032619\n0.022094\n0.01525\n0.016698\n0.0104\n0.010929\n…\n0.324927\n2.831556\n2.778327\n2.820665\n2.75987\n2.649589\n2.689806\n2.649093\n2.689713\n2.716524\n2.779911\n2.712338\n2.776352\n25.20035\n27.100161\n24.932827\n27.098526\n24.926645\n24.321119\n25.088202\n24.544903\n24.126326\n24.32305\n24.369564\n24.48403\n13.461011\n13.215631\n13.423254\n13.113597\n12.539919\n12.765607\n12.564599\n12.7421\n12.87962\n13.208318\n12.885329\n13.164612\n\n\n\n\n\n\n\nFinally, we can convert this to pandas if we want to perform analyses with that tool. Keep in mind that this loads the entire dataframe into memory.\n\n\nCode\ndata_only.to_pandas()\n\n\n\n\n\n\n\n\n\n\nCells_AreaShape_Area\nCells_AreaShape_BoundingBoxArea\nCells_AreaShape_BoundingBoxMaximum_X\nCells_AreaShape_BoundingBoxMaximum_Y\nCells_AreaShape_BoundingBoxMinimum_X\nCells_AreaShape_BoundingBoxMinimum_Y\nCells_AreaShape_Center_X\nCells_AreaShape_Center_Y\nCells_AreaShape_Compactness\nCells_AreaShape_Eccentricity\n...\nNuclei_Texture_Variance_RNA_10_02_256\nNuclei_Texture_Variance_RNA_10_03_256\nNuclei_Texture_Variance_RNA_3_00_256\nNuclei_Texture_Variance_RNA_3_01_256\nNuclei_Texture_Variance_RNA_3_02_256\nNuclei_Texture_Variance_RNA_3_03_256\nNuclei_Texture_Variance_RNA_5_00_256\nNuclei_Texture_Variance_RNA_5_01_256\nNuclei_Texture_Variance_RNA_5_02_256\nNuclei_Texture_Variance_RNA_5_03_256\n\n\n\n\n0\n3437.205322\n6777.026367\n655.655762\n553.805725\n574.797363\n475.201050\n614.663025\n513.953979\n2.809995\n0.766263\n...\n5.863044\n5.749480\n5.372434\n5.473141\n5.380401\n5.467793\n5.536143\n5.733851\n5.548314\n5.717349\n\n\n1\n2723.384521\n5158.307617\n677.795349\n557.942017\n606.970093\n488.857605\n641.975159\n522.861877\n2.561128\n0.741647\n...\n10.363727\n9.988524\n9.360723\n9.590192\n9.381898\n9.565440\n9.692972\n10.118198\n9.752176\n10.084100\n\n\n2\n3654.835693\n7013.448242\n631.593323\n550.501038\n550.170898\n470.806641\n590.420654\n510.163788\n2.775027\n0.761809\n...\n3.848579\n3.750400\n3.545621\n3.615607\n3.552575\n3.612055\n3.651154\n3.754131\n3.665798\n3.757694\n\n\n3\n3173.764160\n6010.796875\n671.297913\n581.970459\n594.554871\n508.082428\n632.437805\n544.703125\n2.488786\n0.750593\n...\n13.534065\n12.938670\n12.413904\n12.706355\n12.442088\n12.701751\n12.854201\n13.250565\n12.877565\n13.260153\n\n\n4\n2861.939453\n5583.744629\n649.689819\n555.609497\n577.530701\n483.638062\n612.984192\n519.093750\n2.492543\n0.756743\n...\n13.423254\n13.113597\n12.539919\n12.765607\n12.564599\n12.742100\n12.879620\n13.208318\n12.885329\n13.164612\n\n\n\n\n5 rows × 3673 columns",
    "crumbs": [
      "How-To Guides",
      "Basic JUMP data access"
    ]
  },
  {
    "objectID": "explanations/Resources.html",
    "href": "explanations/Resources.html",
    "title": "Available resources",
    "section": "",
    "text": "Available resources\n\n\n\nAvailable resources\n\nHome website: Access news and related publications.\nWe provide Open Source Web “JUMPer” interfaces for all three datasets (CRISPR, ORF and Compound). For more details follow this link.\nArdigen provides a website to explore a representation (requires creating a free account).\nSpring Science also provides a website for data exploration (account needed).",
    "crumbs": [
      "Explanations",
      "Available resources"
    ]
  },
  {
    "objectID": "explanations/FAQ.html",
    "href": "explanations/FAQ.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "Frequently Asked Questions\n\nAnalyses\n\nHow can I reproduce an environment to explore JUMP data?\n\nData\n\nDoes JUMP contain X compound/gene?\nWhere are the datasets specification?\nWhy are some images with corresponding images but no downstream analysis?\nWhy do some perturbations have so many replicates\nHow were the profiles created?\nFrequently Asked Questions and links to their answers. They are grouped based on whether they pertain to data, libraries or analyses.",
    "crumbs": [
      "Explanations",
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "explanations/FAQ.html#analyses",
    "href": "explanations/FAQ.html#analyses",
    "title": "Frequently Asked Questions",
    "section": "Analyses",
    "text": "Analyses\n\n\nHow can I reproduce an environment to explore JUMP data?\n(WIP) The easiest way to set things up will be installing from pip in your enviromnment of choice:\npip install jump-pills",
    "crumbs": [
      "Explanations",
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "explanations/FAQ.html#data",
    "href": "explanations/FAQ.html#data",
    "title": "Frequently Asked Questions",
    "section": "Data",
    "text": "Data\n\n\nDoes JUMP contain X compound/gene?\nThe easiest way to find out is querying your dataset using this web tool. Alternatively, you can explore the metadata tables on the datasets repository.\n\n\n\nWhere are the datasets specification?\nThe main resource to understand the technicalities of the JUMP datasets collection and assembly is on this repo.\n\n\n\nWhy are some images with corresponding images but no downstream analysis?\nSome plates failed Quality Control (QC) but we kept them because they may be useful for developing QC methods.\n\n\n\nWhy do some perturbations have so many replicates\nMost plates contain 16 negative control wells, while some have as many as 28 wells. One replicate of four of the compound positive controls are added to wells O23, O24, P23 and P24. The remaining wells contain ORF treatments, with a single replicate of each per plate map and with five replicate plates produced per plate map (issue).\n\n\n\nHow were the profiles created?\nWe used snakemake and pycytominer to generate these. The details can be found in this repo.",
    "crumbs": [
      "Explanations",
      "Frequently Asked Questions"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "Overview\nThis is work in progress. The purpose of this resource is to concentrate all the useful and up-to-date information necessary to make use of JUMP. It aims to summarise the most useful information, including examples, guides, know-hows and links to more material for deeper dives into data acquisition, processing, sharing and visualisation.\n\n\nI just want to access the web tools\nHere you can find the up-to-date web tools to explore JUMP from your browser.\n\n\nI am a developer interested in using and writing programatic tools for JUMP\nOur monorepo hosts Python libraries that may help you.\n\n\nWhy yet another resource?\nIts secondary (yet highly important purpose) is to minimise friction for developers, technical writers and biologists to produce and access novel insights and tools. We believe complexity is one of the biggest challenges in challenge, hampering collaboration and novel biological insights. We aim to make this the one-stop shop for the vast majority of JUMP questions, be it computational or biological.",
    "crumbs": [
      "Home"
    ]
  }
]